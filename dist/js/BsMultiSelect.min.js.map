{"version":3,"sources":["../../js/src/Bs4Commons.es8.js","../../js/src/Bs4AdapterCss.es8.js","../../js/src/Bs4Adapter.es8.js","../../js/src/BsMultiSelect.es8.js"],"names":["Bs4Commons","jQuery","hiddenSelect","dropDownItemHoverClass","this","$","CreateDropDownItemContent","$dropDownItem","optionId","itemText","isSelected","containerClass","dropDownItemClass","checkBoxId","name","toLowerCase","checked","appendTo","$checkBox","find","addClass","prop","CreateSelectedItemContent","$selectedItem","removeSelectedItem","selectedItemClass","removeSelectedItemButtonClass","disabled","css","on","FilterClick","event","target","nodeName","parentElement","Hover","isHover","removeClass","Bs4AdapterCss","options","extend","dropDownMenuClass","selectedPanelClass","selectedPanelFocusClass","selectedPanelReadonlyClass","filterInputItemClass","filterInputClass","bs4Commons","Init","$container","$selectedPanel","$filterInputItem","$filterInput","$dropDownMenu","inputId","id","$formGroup","closest","length","$label","f","attr","UpdateIsValid","$hiddenSelect","hasClass","Enable","isEnabled","off","Focus","isFocused","Bs4Adapter","selectedPanelDefMinHeight","selectedPanelLgMinHeight","selectedPanelSmMinHeight","selectedPanelReadonlyBackgroundColor","selectedPanelFocusBorderColor","selectedPanelFocusBoxShadow","selectedPanelFocusValidBoxShadow","selectedPanelFocusInvalidBoxShadow","filterInputColor","selectedPanelStyle","margin-bottom","selectedItemStyle","padding-left","line-height","removeSelectedItemButtonStyle","font-size","UpdateSize","background-color","window","Popper","JQUERY_NO_CONFLICT","fn","pluginName","dataKey","defSelectedPanelStyleSys","display","flex-wrap","list-style-type","defFilterInputStyleSys","width","border","padding","outline","defDropDownMenuStyleSys","defaults","doManageFocus","useCss","adapter","Plugin","selectElement","TypeError","container","selectedPanel","filterInputItem","filterInput","dropDownMenu","popper","selectedPanelClick","documentMouseup","documentMousedown","documentMouseup2","filterInputItemOffsetLeft","skipFocusout","hoveredDropDownItem","hoveredDropDownIndex","hasDropDownVisible","init","_proto","prototype","updateDropDownPosition","force","offsetLeft","update","hideDropDown","style","showDropDown","resetDropDownMenuHover","filterDropDownMenu","text","value","trim","visible","each","i","dropDownMenuItem","$dropDownMenuItem","show","data","indexOf","hide","clearFilterInput","updatePosition","input","closeDropDown","appendDropDownItem","optionElement","_this","selected","adoptDropDownItem","appendItem","removeItem","remove","removeItemAndCloseDropDown","insertBefore","manageHover","isOn","click","preventDefault","stopPropagation","currentTarget","toggleItem","focus","mouseover","e","mouseout","keydownArrow","down","visibleNodeListArray","toArray","newIndex","forceUpdatePosition","Update","UpdateSizeImpl","UpdateReadonlyImpl","UpdateReadonly","_this2","unbind","containerMousedown","document","focusin","focusout","mousedown","mouseup","_this3","get","contains","val","insertAfter","placement","modifiers","preventOverflow","enabled","flip","ready","selectOptions","index","which","$penult","prev","dropDownItems","querySelectorAll","dropDownItem","it","textContent","toggle","jQueryInterface","test","methodName","charAt","toUpperCase","slice","Constructor","noConflict"],"mappings":"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","sourcesContent":["class Bs4Commons {\r\n    \r\n    constructor(jQuery, hiddenSelect, dropDownItemHoverClass){\r\n        this.$=jQuery;\r\n        this.hiddenSelect=hiddenSelect;\r\n        this.dropDownItemHoverClass = dropDownItemHoverClass;\r\n    }\r\n\r\n    CreateDropDownItemContent(\r\n        $dropDownItem, optionId, itemText, isSelected,\r\n        containerClass, dropDownItemClass){\r\n        let checkBoxId = `${containerClass}-${this.hiddenSelect.name.toLowerCase()}-generated-id-${optionId.toLowerCase()}`;\r\n        let checked = isSelected ? \"checked\" : \"\";\r\n\r\n        let $dropDownItemContent= this.$(`<div class=\"custom-control custom-checkbox\">\r\n            <input type=\"checkbox\" class=\"custom-control-input\" id=\"${checkBoxId}\" ${checked}>\r\n            <label class=\"custom-control-label\" for=\"${checkBoxId}\">${itemText}</label>\r\n        </div>`)\r\n        $dropDownItemContent.appendTo($dropDownItem);\r\n        let $checkBox = $dropDownItem.find(`INPUT[type=\"checkbox\"]`);\r\n        let adoptDropDownItem = (isSelected) => {\r\n            $checkBox.prop('checked', isSelected);\r\n        }\r\n        $dropDownItem.addClass(dropDownItemClass)\r\n        return adoptDropDownItem;\r\n    }\r\n\r\n    CreateSelectedItemContent($selectedItem, itemText, removeSelectedItem,\r\n        selectedItemClass, removeSelectedItemButtonClass, disabled\r\n    ){\r\n        $selectedItem.addClass(selectedItemClass);\r\n        \r\n        this.$(`<span>${itemText}</span>`).appendTo($selectedItem);\r\n        let $button = this.$('<button aria-label=\"Close\" tabIndex=\"-1\" type=\"button\"><span aria-hidden=\"true\">&times;</span></button>')\r\n            .addClass(removeSelectedItemButtonClass)\r\n            .css(\"white-space\", \"nowrap\")\r\n            .on(\"click\", removeSelectedItem)\r\n            .appendTo($selectedItem)\r\n            .prop(\"disabled\", disabled)\r\n        return $button;\r\n    }\r\n\r\n    FilterClick(event){\r\n        return !(event.target.nodeName == \"BUTTON\" || (event.target.nodeName == \"SPAN\" && event.target.parentElement.nodeName == \"BUTTON\"))\r\n    }\r\n\r\n    Hover($dropDownItem, isHover){\r\n        if (isHover)\r\n            $dropDownItem.addClass(this.dropDownItemHoverClass);\r\n        else\r\n            $dropDownItem.removeClass(this.dropDownItemHoverClass);\r\n    }\r\n}\r\nexport default Bs4Commons;\r\n","import Bs4Commons from \"./Bs4Commons.es8\";\r\n\r\nclass Bs4AdapterCss {\r\n\r\n    constructor(jQuery, hiddenSelect, options) {\r\n        const defaults = {\r\n            containerClass: 'dashboardcode-bsmultiselect',\r\n            dropDownMenuClass: 'dropdown-menu',\r\n            dropDownItemClass: 'px-2',\r\n            dropDownItemHoverClass: 'text-primary bg-light',\r\n            selectedPanelClass: 'form-control',\r\n            selectedPanelFocusClass : 'focus',\r\n            selectedPanelReadonlyClass: 'disabled',\r\n            selectedItemClass: 'badge',\r\n            removeSelectedItemButtonClass: 'close',\r\n            filterInputItemClass: '',\r\n            filterInputClass: ''\r\n        };\r\n        this.options = jQuery.extend({}, defaults, options);\r\n        this.jQuery=jQuery;\r\n        this.hiddenSelect=hiddenSelect;\r\n        this.bs4Commons = new Bs4Commons(jQuery, hiddenSelect, this.options.dropDownItemHoverClass);\r\n\r\n    }\r\n\r\n    Init($container, $selectedPanel, $filterInputItem, $filterInput, $dropDownMenu){\r\n        $container.addClass(this.options.containerClass);\r\n        $selectedPanel.addClass(this.options.selectedPanelClass);\r\n\r\n        $dropDownMenu.addClass(this.options.dropDownMenuClass);\r\n        $filterInputItem.addClass(this.options.filterInputItemClass)\r\n        $filterInput.addClass(this.options.filterInputClass);\r\n\r\n        let inputId = this.hiddenSelect.id;\r\n        let $formGroup = this.jQuery(this.hiddenSelect).closest('.form-group');\r\n        \r\n        if ($formGroup.length == 1) {\r\n            let $label = $formGroup.find(`label[for=\"${inputId}\"]`);\r\n            let f = $label.attr('for');\r\n            let $filterInput = $selectedPanel.find('input');\r\n            if (f == this.hiddenSelect.id) {\r\n                let id = `${this.options.containerClass}-generated-filter-id-${this.hiddenSelect.id}`;\r\n                $filterInput.attr('id', id);\r\n                $label.attr('for', id);\r\n            }\r\n        }\r\n    }\r\n\r\n    UpdateIsValid($selectedPanel){\r\n        let $hiddenSelect = this.jQuery(this.hiddenSelect);\r\n        if ($hiddenSelect.hasClass(\"is-valid\")){\r\n            $selectedPanel.addClass(\"is-valid\");\r\n        }\r\n\r\n        if ($hiddenSelect.hasClass(\"is-invalid\")){\r\n            $selectedPanel.addClass(\"is-invalid\");\r\n        }\r\n    }\r\n\r\n    Enable($selectedPanel, isEnabled){\r\n        if(isEnabled){\r\n            $selectedPanel.removeClass(this.options.selectedPanelReadonlyClass);\r\n            $selectedPanel.find('BUTTON').prop(\"disabled\", false).on();\r\n        }\r\n        else{\r\n            $selectedPanel.addClass(this.options.selectedPanelReadonlyClass);\r\n            $selectedPanel.find('BUTTON').prop(\"disabled\", true).off();\r\n        }\r\n    }\r\n\r\n    CreateDropDownItemContent($dropDownItem, optionId, itemText, isSelected){\r\n        return this.bs4Commons.CreateDropDownItemContent($dropDownItem, optionId, itemText, isSelected, this.options.containerClass, this.options.dropDownItemClass);\r\n    }\r\n\r\n    CreateSelectedItemContent($selectedItem, itemText, removeSelectedItem, disabled){\r\n        this.bs4Commons.CreateSelectedItemContent($selectedItem, itemText, removeSelectedItem, this.options.selectedItemClass, this.options.removeSelectedItemButtonClass, disabled);\r\n    }\r\n\r\n    \r\n    Hover($dropDownItem, isHover){\r\n        this.bs4Commons.Hover($dropDownItem, isHover);\r\n    }\r\n\r\n    FilterClick(event){\r\n        return this.bs4Commons.FilterClick(event)\r\n    }\r\n\r\n    Focus($selectedPanel, isFocused){\r\n        if (isFocused){\r\n            $selectedPanel.addClass(this.options.selectedPanelFocusClass);\r\n        }else{\r\n            $selectedPanel.removeClass(this.options.selectedPanelFocusClass);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Bs4AdapterCss;\r\n","import Bs4Commons from \"./Bs4Commons.es8\";\r\n//import styles from './../../scss/BsMutliSelect.scss'\r\n\r\nclass Bs4Adapter {\r\n\r\n    constructor(jQuery, hiddenSelect, options) {\r\n        const defaults = {\r\n            selectedPanelDefMinHeight: 'calc(2.25rem + 2px)',\r\n            selectedPanelLgMinHeight: 'calc(2.875rem + 2px)',\r\n            selectedPanelSmMinHeight: 'calc(1.8125rem + 2px)',\r\n            selectedPanelReadonlyBackgroundColor: '#e9ecef',\r\n            selectedPanelFocusBorderColor: '#80bdff',\r\n            selectedPanelFocusBoxShadow: '0 0 0 0.2rem rgba(0, 123, 255, 0.25)',\r\n            selectedPanelFocusValidBoxShadow: '0 0 0 0.2rem rgba(40, 167, 69, 0.25)',\r\n            selectedPanelFocusInvalidBoxShadow: '0 0 0 0.2rem rgba(220, 53, 69, 0.25)',\r\n            filterInputColor: '#495057'\r\n        };\r\n        this.options = jQuery.extend({}, defaults, options);\r\n        this.jQuery=jQuery;\r\n        this.hiddenSelect=hiddenSelect;\r\n\r\n        this.containerClass= 'dashboardcode-bsmultiselect';\r\n        this.dropDownMenuClass= 'dropdown-menu';\r\n        this.dropDownItemClass= 'px-2';\r\n        this.dropDownItemHoverClass= 'text-primary bg-light';\r\n        this.selectedPanelClass= 'form-control';\r\n        this.selectedItemClass= 'badge';\r\n        this.removeSelectedItemButtonClass= 'close';\r\n\r\n        this.selectedPanelStyle= {'margin-bottom': '0'};\r\n        this.selectedItemStyle= {'padding-left': '0px', 'line-height': '1rem'};\r\n        this.removeSelectedItemButtonStyle= {'line-height': '1rem', 'font-size':'1.3rem'};\r\n\r\n        this.bs4Commons = new Bs4Commons(jQuery, hiddenSelect, this.dropDownItemHoverClass);\r\n    }\r\n\r\n    Init($container, $selectedPanel, $filterInputItem, $filterInput, $dropDownMenu){\r\n\r\n        $container.addClass(this.containerClass);\r\n        $selectedPanel.addClass(this.selectedPanelClass);\r\n        $selectedPanel.css(this.selectedPanelStyle);\r\n\r\n        $dropDownMenu.addClass(this.dropDownMenuClass);\r\n        $filterInput.css(\"color\", this.options.filterInputColor);\r\n\r\n        let inputId = this.hiddenSelect.id;\r\n        let $formGroup = this.jQuery(this.hiddenSelect).closest('.form-group');\r\n        \r\n        if ($formGroup.length == 1) {\r\n            let $label = $formGroup.find(`label[for=\"${inputId}\"]`);\r\n            let f = $label.attr('for');\r\n            let $filterInput = $selectedPanel.find('input');\r\n            if (f == this.hiddenSelect.id) {\r\n                let id = `${this.containerClass}-generated-filter-id-${this.hiddenSelect.id}`;\r\n                $filterInput.attr('id', id);\r\n                $label.attr('for', id);\r\n            }\r\n        }\r\n    }\r\n\r\n    UpdateIsValid($selectedPanel){\r\n        let $hiddenSelect = this.jQuery(this.hiddenSelect);\r\n        if ($hiddenSelect.hasClass(\"is-valid\")){\r\n            $selectedPanel.addClass(\"is-valid\");\r\n        }\r\n\r\n        if ($hiddenSelect.hasClass(\"is-invalid\")){\r\n            $selectedPanel.addClass(\"is-invalid\");\r\n        }\r\n    }\r\n\r\n    UpdateSize($selectedPanel){\r\n        if ($selectedPanel.hasClass(\"form-control-lg\")){\r\n            $selectedPanel.css(\"min-height\", this.options.selectedPanelLgMinHeight);\r\n        } else if ($selectedPanel.hasClass(\"form-control-sm\")){\r\n            $selectedPanel.css(\"min-height\", this.options.selectedPanelSmMinHeight);\r\n        } else {\r\n            $selectedPanel.css(\"min-height\", this.options.selectedPanelDefMinHeight);\r\n        }\r\n    }\r\n\r\n    Enable($selectedPanel, isEnabled){\r\n        if(isEnabled){\r\n            $selectedPanel.css({\"background-color\": \"\"});\r\n            $selectedPanel.find('BUTTON').prop(\"disabled\", false);\r\n        }\r\n        else{\r\n            $selectedPanel.css({\"background-color\": this.options.selectedPanelReadonlyBackgroundColor});\r\n            $selectedPanel.find('BUTTON').prop(\"disabled\", true);\r\n        }\r\n    }\r\n\r\n    CreateDropDownItemContent($dropDownItem, optionId, itemText, isSelected){\r\n        return this.bs4Commons.CreateDropDownItemContent($dropDownItem, optionId, itemText, isSelected, this.containerClass, this.dropDownItemClass)\r\n    }\r\n\r\n    CreateSelectedItemContent($selectedItem, itemText, removeSelectedItem, disabled){\r\n        let $buttom = this.bs4Commons.CreateSelectedItemContent($selectedItem, itemText, removeSelectedItem, this.selectedItemClass, this.removeSelectedItemButtonClass, disabled);\r\n        $buttom.css(this.removeSelectedItemButtonStyle);\r\n        $selectedItem.css(this.selectedItemStyle);\r\n    }\r\n\r\n    Hover($dropDownItem, isHover){\r\n        this.bs4Commons.Hover($dropDownItem, isHover);\r\n    }\r\n\r\n    FilterClick(event){\r\n        return this.bs4Commons.FilterClick(event)\r\n    }\r\n\r\n    Focus($selectedPanel, isFocused){\r\n        if (isFocused){\r\n                if ($selectedPanel.hasClass(\"is-valid\")){\r\n                    $selectedPanel.css(\"box-shadow\", this.options.selectedPanelFocusValidBoxShadow);\r\n                } else if ($selectedPanel.hasClass(\"is-invalid\")){\r\n                    $selectedPanel.css(\"box-shadow\", this.options.selectedPanelFocusInvalidBoxShadow);\r\n                } else {\r\n                    $selectedPanel\r\n                        .css(\"box-shadow\", this.options.selectedPanelFocusBoxShadow)\r\n                        .css(\"border-color\", this.options.selectedPanelFocusBorderColor);\r\n                }\r\n        }else{\r\n            $selectedPanel.css(\"box-shadow\", \"\" ).css(\"border-color\", \"\")\r\n        }\r\n    }\r\n}\r\n\r\nexport default Bs4Adapter;\r\n","import $ from 'jquery'\nimport Popper from 'popper.js'\nimport Bs4AdapterCss from './Bs4AdapterCss.es8'\nimport Bs4Adapter from './Bs4Adapter.es8'\n\n// TODO: try to find convinient way to declare private members. Is it convinient enough to move them into IIFE?\nconst BsMultiSelect = ((window, $, Popper) => {\n    const JQUERY_NO_CONFLICT = $.fn[pluginName];\n    const pluginName = 'dashboardCodeBsMultiSelect';\n    const dataKey = `plugin_${pluginName}`;\n\n    const defSelectedPanelStyleSys = {'display':'flex', 'flex-wrap':'wrap', 'list-style-type':'none'};  // remove bullets since this is ul\n    const defFilterInputStyleSys   = {'width':'2ch', 'border':'0', 'padding':'0', 'outline':'none', 'background-color':'transparent' };\n    const defDropDownMenuStyleSys  = {'list-style-type':'none'}; // remove bullets since this is ul\n\n    const defaults = {\n        doManageFocus:true,\n        useCss:false,\n        adapter:null\n    }\n\n    class Plugin {\n        constructor(selectElement, options, adapter) {\n            if (typeof Popper === 'undefined') {\n                throw new TypeError('DashboardCode BsMultiSelect require Popper.js (https://popper.js.org)')\n            }\n\n            // readonly\n            this.selectElement = selectElement;\n            this.options = $.extend({}, defaults, options);\n\n            if (adapter)\n                this.adapter = adapter;\n            else\n                this.adapter = this.options.useCss?new Bs4AdapterCss($, this.selectElement):new Bs4Adapter($, this.selectElement);\n            \n            this.container = null;\n            this.selectedPanel = null;\n            this.filterInputItem = null;\n            this.filterInput = null;\n            this.dropDownMenu = null;\n            this.popper = null;\n\n            // removable handlers\n            this.selectedPanelClick  = null;\n            this.documentMouseup   = null;\n            this.documentMousedown   = null;\n            this.documentMouseup2   = null;\n\n            // state\n            this.disabled=null;\n            this.filterInputItemOffsetLeft = null; // used to detect changes in input field position (by comparision with current value)\n            this.skipFocusout = false;\n            this.hoveredDropDownItem = null;\n            this.hoveredDropDownIndex = null;\n            this.hasDropDownVisible = false;\n            this.init();\n        }\n\n        updateDropDownPosition(force) {\n            let offsetLeft = this.filterInputItem.offsetLeft;\n            if (force || this.filterInputItemOffsetLeft!=offsetLeft){\n                this.popper.update();\n                this.filterInputItemOffsetLeft=offsetLeft;\n            }\n        }\n\n        hideDropDown() {\n            this.dropDownMenu.style.display = 'none';\n        }\n\n        showDropDown() {\n            this.dropDownMenu.style.display = 'block';\n        }\n\n        // Public methods\n        resetDropDownMenuHover() {\n            if (this.hoveredDropDownItem !== null) {\n                this.adapter.Hover($(this.hoveredDropDownItem), false);\n                this.hoveredDropDownItem = null;\n            }\n            this.hoveredDropDownIndex = null;\n        }\n\n        filterDropDownMenu() {\n            let text = this.filterInput.value.trim().toLowerCase();\n            let visible = 0;\n            $(this.dropDownMenu).find('LI').each((i, dropDownMenuItem) => {\n                let $dropDownMenuItem = $(dropDownMenuItem);\n                if (text == '') {\n                    $dropDownMenuItem.show();\n                    visible++;\n                }\n                else {\n                    let itemText = $dropDownMenuItem.data(\"option-text\");\n                    let isSelected = $dropDownMenuItem.data(\"option-selected\");\n                    if (!isSelected && itemText.indexOf(text)>=0) {\n                        $dropDownMenuItem.show();\n                        visible++;\n                    } else {\n                        $dropDownMenuItem.hide();\n                    }\n                }\n            });\n            this.hasDropDownVisible = visible > 0;\n            this.resetDropDownMenuHover();\n        }\n\n        clearFilterInput(updatePosition) {\n            if (this.filterInput.value) {\n                this.filterInput.value = '';\n                this.input(updatePosition);\n            }\n        }\n\n        closeDropDown() {\n            this.resetDropDownMenuHover();\n            this.clearFilterInput(true);\n            this.hideDropDown();\n        }\n\n        appendDropDownItem(optionElement) {\n            let optionId = optionElement.value;\n            let itemText = optionElement.text;\n            let isSelected = optionElement.selected;\n            let $dropDownItem = $(\"<LI/>\");\n            $dropDownItem.data(\"option-id\", optionId);\n            $dropDownItem.data(\"option-text\", itemText.toLowerCase());\n\n            let adoptDropDownItem = this.adapter.CreateDropDownItemContent($dropDownItem, optionId, itemText, isSelected)\n            $dropDownItem.appendTo(this.dropDownMenu);\n\n            let appendItem = () => {\n                $dropDownItem.data(\"option-selected\", true);\n                let $selectedItem = $(\"<LI/>\");\n                $selectedItem.data(\"option-id\", optionId);\n                optionElement.selected = true;\n                adoptDropDownItem(true);\n\n                let removeItem = () => {\n                    $dropDownItem.data(\"option-selected\", false);\n                    $dropDownItem.data(\"option-toggle\", appendItem);\n                    $selectedItem.data(\"option-remove\", null);\n                    $selectedItem.remove();\n                    optionElement.selected = false;\n                    adoptDropDownItem(false);\n                };\n                let removeItemAndCloseDropDown = () => {\n                    removeItem();\n                    this.closeDropDown();\n                };\n                this.adapter.CreateSelectedItemContent(\n                    $selectedItem,\n                    itemText,\n                    removeItemAndCloseDropDown,\n                    this.disabled\n                );\n                $selectedItem.insertBefore(this.filterInputItem);\n                $dropDownItem.data(\"option-toggle\", removeItem);\n                $selectedItem.data(\"option-remove\", removeItemAndCloseDropDown);\n                return $selectedItem;\n            }\n            $dropDownItem.data(\"option-toggle\", () => appendItem());\n            \n            if (isSelected) {\n                appendItem();\n            }\n            let manageHover = (event, isOn) => {\n                this.adapter.Hover($(event.target).closest(\"LI\"), isOn)\n            }\n            $dropDownItem.click(event => {\n                event.preventDefault();\n                event.stopPropagation();\n                let toggleItem = $(event.currentTarget).closest(\"LI\").data(\"option-toggle\");\n                toggleItem();\n                this.filterInput.focus();\n            }).mouseover(e => manageHover(e, true)).mouseout(e => manageHover(e, false));\n        }\n\n        keydownArrow(down) {\n            let visibleNodeListArray = $(this.dropDownMenu).find('LI:not([style*=\"display: none\"])').toArray();\n            if (visibleNodeListArray.length > 0) {\n                if (this.hasDropDownVisible) {\n                    this.updateDropDownPosition(true);\n                    this.showDropDown();\n                }\n                if (this.hoveredDropDownItem === null) {\n                    this.hoveredDropDownIndex = down ? 0 : visibleNodeListArray.length - 1;\n                }\n                else {\n                    this.adapter.Hover($(this.hoveredDropDownItem), false);\n                    if (down) {\n                        let newIndex = this.hoveredDropDownIndex + 1;\n                        this.hoveredDropDownIndex = newIndex < visibleNodeListArray.length ? newIndex : 0;\n                    } else {\n                        let newIndex = this.hoveredDropDownIndex - 1;\n                        this.hoveredDropDownIndex = newIndex >= 0 ? newIndex : visibleNodeListArray.length - 1;\n                    }\n                }\n                this.hoveredDropDownItem = visibleNodeListArray[this.hoveredDropDownIndex];\n                this.adapter.Hover($(this.hoveredDropDownItem), true);\n            }\n        }\n\n        input(forceUpdatePosition) {\n            this.filterInput.style.width = this.filterInput.value.length*1.3 + 2 + \"ch\";\n            this.filterDropDownMenu();\n            if (this.hasDropDownVisible) {\n                if (forceUpdatePosition) // ignore it if it is called from\n                    this.updateDropDownPosition(forceUpdatePosition); // we need it to support case when textbox changes its place because of line break (texbox grow with each key press)\n                this.showDropDown();\n            } else {\n                this.hideDropDown();\n            }\n        }\n\n        Update(){\n            let $selectedPanel = (this.selectedPanel);\n            this.adapter.UpdateIsValid($selectedPanel);\n            this.UpdateSizeImpl($selectedPanel);\n            this.UpdateReadonlyImpl($(this.container), $selectedPanel, $(this.filterInput), $(this.dropDownMenu));\n        }\n\n        UpdateSize(){\n            this.UpdateSizeImpl($(this.selectedPanel));\n        }\n\n        UpdateReadonly(){\n            this.UpdateReadonlyImpl($(this.container), $(this.selectedPanel), $(this.filterInput), $(this.dropDownMenu));\n        }\n\n        UpdateSizeImpl($selectedPanel){\n            if (this.adapter.UpdateSize)\n                this.adapter.UpdateSize($selectedPanel);\n        }\n\n        UpdateReadonlyImpl($container, $selectedPanel, $filterInput, $dropDownMenu){\n            let disabled = this.selectElement.disabled;\n            if (this.disabled!==disabled){\n                if (disabled) {\n                    this.filterInput.style.display = \"none\";\n                    this.adapter.Enable($selectedPanel, false);\n\n                    $container.unbind(\"mousedown\", this.containerMousedown);\n                    $(window.document).unbind(\"mouseup\", this.documentMouseup);\n                    $(window.document).unbind(\"mouseup\", this.documentMouseup2);\n                    $selectedPanel.unbind(\"click\", this.selectedPanelClick);\n                } else {\n                    this.filterInput.style.display = \"inline-block\";\n                    this.adapter.Enable($selectedPanel, true);\n                    \n                    $selectedPanel.click(this.selectedPanelClick); // removable\n\n                    $dropDownMenu.click( event => event.stopPropagation());\n\n                    $dropDownMenu.mouseover(() => this.resetDropDownMenuHover());\n\n                    if (this.options.doManageFocus)\n                    {\n                        $filterInput.focusin(() => this.adapter.Focus($selectedPanel, true))\n                                    .focusout(() => { if (!this.skipFocusout)\n                                                        this.adapter.Focus($selectedPanel, false) });\n                        $container.mousedown(this.containerMousedown);  // removable\n                        $(window.document).mouseup(this.documentMouseup); // removable\n                    }\n\n                    $(window.document).mouseup(this.documentMouseup2); // removable\n                }\n                this.disabled=disabled;\n            }\n        }\n\n        init() {\n            let $hiddenSelect = $(this.selectElement);\n            $hiddenSelect.hide();\n\n            let $container = $(\"<DIV/>\");\n            this.container = $container.get(0);\n\n            let $selectedPanel = $(\"<UL/>\");\n            $selectedPanel.css(defSelectedPanelStyleSys);\n            \n            this.selectedPanel = $selectedPanel.get(0);\n            \n            $selectedPanel.appendTo(this.container);\n\n            let $filterInputItem = $('<LI/>');\n            this.filterInputItem = $filterInputItem.get(0)\n\n            $filterInputItem.appendTo(this.selectedPanel);\n\n            let $filterInput = $('<INPUT type=\"search\" autocomplete=\"off\">');\n            $filterInput.css(defFilterInputStyleSys);\n            $filterInput.appendTo(this.filterInputItem);\n            this.filterInput = $filterInput.get(0);\n\n            let $dropDownMenu = $(\"<UL/>\")\n                .css({\"display\":\"none\"})\n                .appendTo($container);\n            this.dropDownMenu = $dropDownMenu.get(0);\n            \n            // prevent heavy understandable styling error\n            $dropDownMenu.css(defDropDownMenuStyleSys);\n\n            // create handlers\n            this.documentMouseup = () => {\n                this.skipFocusout = false;\n            }\n    \n            this.documentMousedown = () => {\n                this.skipFocusout = true;\n            };\n\n            this.documentMouseup2 = event => {\n                if (!(this.container === event.target || $.contains(this.container, this.target))) {\n                    this.closeDropDown();\n                }\n            }\n\n            this.selectedPanelClick = event => {\n                if (event.target.nodeName != \"INPUT\")\n                    $(this.filterInput).val('').focus();\n                if (this.hasDropDownVisible && this.adapter.FilterClick(event)){\n                    this.updateDropDownPosition(true);\n                    this.showDropDown();\n                }\n            };\n\n\n            this.adapter.Init($container, $selectedPanel, $filterInputItem, $filterInput, $dropDownMenu);\n            $container.insertAfter($hiddenSelect);\n            \n            this.popper = new Popper(this.filterInput, this.dropDownMenu, {\n                placement: 'bottom-start',\n                modifiers: {\n                    preventOverflow: {enabled:false},\n                    hide: {enabled:false},\n                    flip: { enabled:false }\n                    }\n            });\n            this.adapter.UpdateIsValid($selectedPanel);\n            this.UpdateSizeImpl($selectedPanel);\n            this.UpdateReadonlyImpl($container, $selectedPanel, $filterInput, $dropDownMenu);\n\n            // some browsers (IE11) can change select value (as part of \"autocomplete\") after page is loaded but before \"ready\" event\n            $(document).ready(() => {\n                let selectOptions = $hiddenSelect.find('OPTION');\n                selectOptions.each(\n                    (index, optionElement) => {\n                        this.appendDropDownItem(optionElement);\n                    }\n                );\n                this.hasDropDownVisible = selectOptions.length > 0;\n                this.updateDropDownPosition(false);\n            });\n\n            $filterInput.on(\"keydown\", (event) => {\n                if (event.which == 38) {\n                    event.preventDefault();\n                    this.keydownArrow(false);\n                }\n                else if (event.which == 40) {\n                    event.preventDefault()\n                    this.keydownArrow(true);\n                }\n                else if (event.which == 13) {\n                    event.preventDefault();\n                }\n                else if (event.which == 9) {\n                    if (this.filterInput.value) {\n                        event.preventDefault();\n                    }\n                    else {\n                        this.closeDropDown();\n                    }\n                }\n                else {\n                    if (event.which == 8) {\n                        // NOTE: this will process backspace only if there are no text in the input field\n                        // If user will find this inconvinient, we will need to calculate something like this\n                        // this.isBackspaceAtStartPoint = (this.filterInput.selectionStart == 0 && this.filterInput.selectionEnd == 0);\n                        if (!this.filterInput.value)\n                        {\n                            let $penult = $(this.selectedPanel).find(\"LI:last\").prev();\n                            if ($penult.length){\n                                let removeItem = $penult.data(\"option-remove\");\n                                removeItem();\n                            }\n                            this.updateDropDownPosition(false);\n                        }\n                    }\n                    this.resetDropDownMenuHover();\n                }\n            });\n\n            $filterInput.on(\"keyup\", (event) => {\n                if (event.which == 13 || event.which == 9 ) {\n                    if (this.hoveredDropDownItem) {\n                        let $hoveredDropDownItem = $(this.hoveredDropDownItem);\n                        let toggleItem =  $hoveredDropDownItem.data(\"option-toggle\");\n                        toggleItem();\n                        this.closeDropDown();\n                    } else {\n                        let text = this.filterInput.value.trim().toLowerCase();\n                        let dropDownItems = this.dropDownMenu.querySelectorAll(\"LI\");\n                        let dropDownItem = null;\n                        for (let i = 0; i < dropDownItems.length; ++i) {\n                            let it = dropDownItems[i];\n                            if (it.textContent.trim().toLowerCase() == text)\n                            {\n                                dropDownItem=it;\n                                break;\n                            }\n                        }\n                        if (dropDownItem) {\n                            let $dropDownItem = $(dropDownItem);\n                            let isSelected = $dropDownItem.data(\"option-selected\");\n                            if (!isSelected){\n                                let toggle = $dropDownItem.data(\"option-toggle\");\n                                toggle();\n                            }\n                            this.clearFilterInput(true);\n                        }\n                    }\n                }\n                else if (event.which == 27) { // escape\n                    this.closeDropDown();\n                }\n            });\n\n            $filterInput.on('input', () => {\n                this.input(true);\n            });\n        }\n    }\n\n    function jQueryInterface(options) {\n        return this.each(function () {\n            let data = $(this).data(dataKey)\n\n            if (!data) {\n                if (/dispose|hide/.test(options)) {\n                    return;\n                }\n                const optionsObject = (typeof options === 'object')?options:null;\n                data = new Plugin(this, optionsObject);\n                $(this).data(dataKey, data);\n            }\n\n            if (typeof options === 'string') {\n                let methodName = options;\n                if (typeof data[methodName] === 'undefined') {\n                    throw new TypeError(`No method named \"${methodName}\"`)\n                }\n                data[methodName]()\n            }\n        })\n    }\n\n    $.fn[pluginName] = jQueryInterface;\n\n    // in case of mulitple $(this) it will return 1st element plugin instance\n    $.fn[pluginName.charAt(0).toUpperCase() + pluginName.slice(1)] = function () {\n        return $(this).data(\"plugin_\" + pluginName);\n    };\n\n    $.fn[pluginName].Constructor = Plugin;\n\n    $.fn[pluginName].noConflict = function () {\n        $.fn[pluginName] = JQUERY_NO_CONFLICT\n        return jQueryInterface;\n    }\n    return Plugin;\n})(window, $, Popper);\n\nexport default BsMultiSelect;\n"]}