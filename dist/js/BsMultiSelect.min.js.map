{"version":3,"sources":["../../js/src/BsMultiSelect.es8.js"],"names":["window","$","Popper","JQUERY_NO_CONFLICT","fn","pluginName","dataKey","defFilterInputItemStyleSys","display","defFilterInputStyle","width","border","padding","outline","defSelectedPanelStyle","cursor","flex-wrap","align-items","margin-bottom","defSelectedItemStyle","padding-left","padding-bottom","defRemoveSelectedItemButtonStyle","line-height","font-size","defaults","items","selectedPanelMinHeight","selectedPanelReadonlyBackgroundColor","selectedPanelValidBoxShadow","selectedPanelInvalidBoxShadow","filterInputColor","containerClass","dropDownMenuClass","dropDownItemClass","selectedPanelClass","selectedPanelReadonlyClass","selectedItemClass","removeSelectedItemButtonClass","filterInputItemClass","filterInputClass","Plugin","element","options","TypeError","this","extend","hiddenSelect","container","dropDownMenu","selectedPanel","filterInput","filterInputItem","popper","filterInputItemOffsetLeft","skipFocusout","backspaceAtStartPoint","selectedDropDownItem","selectedDropDownIndex","hasItems","init","_proto","prototype","updateDropDownPosition","force","offsetLeft","update","hideDropDown","removeClass","showDropDown","addClass","setCheck","optionId","isChecked","i","length","value","selected","getInputValue","val","closeDropDown","resetSelectDropDownMenu","clearFilterInput","updatePosition","adoptFilterInputLength","filterDropDownMenu","text","trim","visible","find","each","item","$item","show","itemText","prop","toLowerCase","indexOf","hide","clickDropDownItem","event","preventDefault","stopPropagation","$menuItem","currentTarget","closest","data","$checkBox","$selectedItem","removeSelectedItem","createAndAppendSelectedItem","focus","appendDropDownItem","itemValue","checkBoxId","name","appendTo","_this","css","insertBefore","$buttom","click","style","analyzeInputText","nodeList","querySelectorAll","it","textContent","classList","remove","keydownArrow","down","visibleNodeListArray","toArray","newIndex","add","_this2","$hiddenSelect","disabled","$container","insertAfter","get","$selectedPanel","hasClass","$filterInputItem","$filterInput","$dropDownMenu","placement","modifiers","preventOverflow","enabled","flip","document","ready","selectOptions","index","option","forEach","on","target","background-color","inputId","id","$formGroup","$label","attr","nodeName","parentElement","which","keyCode","selectionStart","selectionEnd","startPosition","array","itemToDelete","focusin","focusout","mousedown","mouseup","contains","jQueryInterface","test","methodName","charAt","toUpperCase","slice","Constructor","noConflict"],"mappings":";;;;;2WAIuB,SAACA,EAAQC,EAAGC,GAC/B,IAAMC,EAAqBF,EAAEG,GAAGC,GAC1BA,EAAa,6BACbC,EAAAA,UAAoBD,EAEpBE,EAA6B,CAACC,QAAW,SAEzCC,EAAsB,CAACC,MAAS,MAAOC,OAAU,IAAKC,QAAW,IAAKC,QAAW,QACjFC,EAAwB,CAACC,OAAU,OAAQP,QAAW,OAAQQ,YAAa,OAAQC,cAAe,SAAUC,gBAAiB,OAE7HC,EAAuB,CAACC,eAAgB,MAAOC,iBAAkB,MAAOb,QAAW,OAAQS,cAAe,UAE1GK,EAAmC,CAACC,cAAe,OAAQC,YAAY,UACvEC,EAAW,CACbC,MAAO,GACPD,SAAU,GAEVE,uBAAwB,sBACxBC,qCAAsC,UACtCC,4BAA6B,wCAC7BC,8BAA+B,uCAC/BC,iBAAkB,UAClBC,eAAgB,8BAChBC,kBAAmB,gBACnBC,kBAAmB,OACnBC,mBAAoB,GACpBC,2BAA4B,GAC5BC,kBAAmB,GACnBC,8BAA+B,GAC/BC,qBAAsB,GACtBC,iBAAkB,IAGhBC,EAjCoC,WAkCtC,SAAAA,EAAYC,EAASC,GACjB,GAAsB,oBAAXzC,EACP,MAAM,IAAI0C,UAAU,yEAIxBC,KAAKH,QAAUA,EACfG,KAAKF,QAAU1C,EAAE6C,OAAO,GAAIrB,EAAUkB,GACtCE,KAAKE,aAAeL,EACpBG,KAAKG,UAAY,KACjBH,KAAKI,aAAe,KACpBJ,KAAKK,cAAgB,KACrBL,KAAKM,YAAc,KACnBN,KAAKO,gBAAkB,KACvBP,KAAKQ,OAAS,KAGdR,KAAKS,0BAA4B,KACjCT,KAAKU,cAAe,EACpBV,KAAKW,sBAAwB,KAC7BX,KAAKY,qBAAuB,KAC5BZ,KAAKa,sBAAwB,KAC7Bb,KAAKc,UAAW,EAEhBd,KAAKe,OA1D6B,IAAAC,EAAApB,EAAAqB,UAAA,OAAAD,EA6DtCE,uBA7DsC,SA6DfC,GAEnB,IAAIC,EAAapB,KAAKO,gBAAgBa,YAClCD,GAASnB,KAAKS,2BAA2BW,KACzCpB,KAAKQ,OAAOa,SACZrB,KAAKS,0BAA0BW,IAlEDJ,EAyEtCM,aAzEsC,WA2E9BlE,EAAE4C,KAAKI,cAAcmB,YAAY,SA3EHP,EAkFtCQ,aAlFsC,WAoF1BxB,KAAKkB,wBAAuB,GAC5B9D,EAAE4C,KAAKI,cAAcqB,SAAS,SArFJT,EA4FtCU,SA5FsC,SA4F7BC,EAAUC,GACf,IAAK,IAAIC,EAAI,EAAGA,EAAI7B,KAAKE,aAAaJ,QAAQgC,OAAQD,GAAK,EAAG,CAE1D,GADa7B,KAAKE,aAAaJ,QAAQ+B,GAC5BE,OAASJ,EAAU,CAC1B3B,KAAKE,aAAaJ,QAAQ+B,GAAGG,SAAWJ,EACxC,SAjG0BZ,EAuGtCiB,cAvGsC,WAwGlC,OAAO7E,EAAE4C,KAAKE,cAAcgC,OAxGMlB,EA2GtCmB,cA3GsC,WA4GlCnC,KAAKoC,0BACLpC,KAAKqC,mBACLrC,KAAKsB,eACLtB,KAAKkB,0BA/G6BF,EAkHtCqB,iBAlHsC,SAkHrBC,GACiB,IAA1BtC,KAAKM,YAAYyB,QACjB/B,KAAKM,YAAYyB,MAAQ,GACzB/B,KAAKuC,yBACLvC,KAAKwC,qBACDF,GAAkBtC,KAAKc,UACvBd,KAAKkB,wBAAuB,KAxHFF,EA6HtCwB,mBA7HsC,WA8HlC,IAAIC,EAAOzC,KAAKM,YAAYyB,MAAMW,OAC9BC,EAAU,EACdvF,EAAE4C,KAAKI,cAAcwC,KAAK,MAAMC,KAAK,SAAChB,EAAGiB,GACrC,IAAIC,EAAQ3F,EAAE0F,GACd,GAAY,IAARL,EACAM,EAAMC,OACNL,QAEC,CACD,IAAIM,EAAWF,EAAMN,QACLM,EAAMH,KAAK,0BAEZM,KAAK,YAAkE,GAApDD,EAASE,cAAcC,QAAQX,EAAKU,gBAClEJ,EAAMC,OACNL,KAEAI,EAAMM,UAIlBrD,KAAKc,SAAqB,EAAV6B,EAChB3C,KAAKoC,2BAnJ6BpB,EAsJtCsC,kBAtJsC,SAsJpBC,GACdA,EAAMC,iBACND,EAAME,kBAEN,IAAIC,EAAYtG,EAAEmG,EAAMI,eAAeC,QAAQ,MAC3CjC,EAAY+B,EAAUG,KAAK,aAC3BC,EAAYJ,EAAUd,KAAK,0BAC/B,GAAIkB,EAAUZ,KAAK,WAAY,CAC3B,IAAIa,EAAgB3G,EAAE4C,KAAKK,eAAeuC,KAAtB,sBAAiDjB,EAAjD,MACpB3B,KAAKgE,mBAAmBD,EAAepC,EAAUmC,OAC9C,CACH,IAAIb,EAAWS,EAAUd,KAAK,SAASH,OACvCzC,KAAKiE,4BAA4BH,EAAWnC,EAAUsB,GACtDa,EAAUZ,KAAK,WAAW,GAE9BlD,KAAKqC,kBAAiB,GACtBrC,KAAKM,YAAY4D,SAtKiBlD,EAyKtCmD,mBAzKsC,SAyKnBC,EAAWnB,EAAUrB,GACpC,IAAID,EAAWyC,EACXC,EAAAA,+BAA4CrE,KAAKE,aAAaoE,KAAKnB,cAAnE,iBAAiGxB,EAASwB,cAU1GW,EARgB1G,EAAAA,uBACOuE,EADP,yJAGkD0C,EAHlD,MADNzC,EAAY,UAAY,IAClB,uEAImCyC,EAJnC,KAIkDpB,EAJlD,gEAMPxB,SAASzB,KAAKF,QAAQT,mBAAmBkF,SAASnH,EAAE4C,KAAKI,eAExCwC,KAAd,0BACZhB,GACA5B,KAAKiE,4BAA4BH,EAAWnC,EAAUsB,IAvLxBjC,EA2LtCiD,4BA3LsC,SA2LVH,EAAWnC,EAAUsB,GAAU,IAAAuB,EAAAxE,KACnD+D,EAAgB3G,EAAAA,uBAAyBuE,EAAzB,WAA4CsB,EAA5C,gBACfjD,KAAKF,QAAQN,kBAIduE,EAActC,SAASzB,KAAKF,QAAQN,oBAHpCuE,EAActC,SArLG,SAsLjBsC,EAAcU,IAAInG,IAKtByF,EAAcW,aAAatH,EAAE4C,KAAKO,kBAClC,IAAIoE,EAAUvH,EAAE,2GACX4C,KAAKF,QAAQL,8BAKdkF,EAAQlD,SAASzB,KAAKF,QAAQL,gCAJ9BkF,EAAQlD,SA5LqB,SA6L7BkD,EAAQF,IAAIhG,IAMhBkG,EAAQJ,SAASR,GACjB/D,KAAK0B,SAASC,GAAU,GAExBgD,EAAQC,MAAM,WACVJ,EAAKR,mBAAmBD,EAAepC,EAAUmC,GACjDU,EAAKnC,kBAAiB,GACtBmC,EAAKtD,wBAAuB,GAC5B9D,EAAEoH,EAAKlE,aAAa4D,WArNUlD,EAyNtCuB,uBAzNsC,WA0NlCvC,KAAKM,YAAYuE,MAAMhH,MAAsC,IAA9BmC,KAAKM,YAAYyB,MAAMD,OAAa,EAAI,MA1NrCd,EA6NtC8D,iBA7NsC,WAiOlC,IAHA,IAAIrC,EAAOzC,KAAKM,YAAYyB,MAAMW,OAAOS,cACrC4B,EAAW/E,KAAKI,aAAa4E,iBAAiB,MAC9ClC,EAAO,KACFjB,EAAI,EAAGA,EAAIkD,EAASjD,SAAUD,EAAG,CACtC,IAAIoD,EAAKF,EAASlD,GAClB,GAAIoD,EAAGC,YAAYxC,OAAOS,eAAiBV,EAC3C,CACIK,EAAKmC,EACL,OAGR,GAAInC,EAAM,CACN,IAAIC,EAAQ3F,EAAE0F,GACVgB,EAAYf,EAAMH,KAAK,0BAC3B,IAAKkB,EAAUZ,KAAK,WAAY,CAC5B,IAAIvB,EAAWoB,EAAMc,KAAK,aACtBZ,EAAWF,EAAMH,KAAK,SAASH,OACnCzC,KAAKiE,4BAA4BH,EAAWnC,EAAUsB,GACtDa,EAAUZ,KAAK,WAAW,GAE9BlD,KAAKqC,kBAAiB,KAlPQrB,EAsPtCoB,wBAtPsC,WAuPA,OAA9BpC,KAAKY,uBACLZ,KAAKY,qBAAqBuE,UAAUC,OAAO,YAC3CpF,KAAKY,qBAAqBuE,UAAUC,OAAO,gBAC3CpF,KAAKY,qBAAuB,MAEhCZ,KAAKa,sBAAwB,MA5PKG,EA+PtCqE,aA/PsC,SA+PzBC,GACT,IAAIC,EAAuBnI,EAAE4C,KAAKI,cAAcwC,KAAK,oCAAoC4C,UACzF,GAAkC,EAA9BD,EAAqBzD,OAAY,CAIjC,GAHI9B,KAAKc,UACLd,KAAKwB,eAEyB,OAA9BxB,KAAKY,qBACLZ,KAAKa,sBAAwByE,EAAO,EAAIC,EAAqBzD,OAAS,OAMtE,GAFA9B,KAAKY,qBAAqBuE,UAAUC,OAAO,YAC3CpF,KAAKY,qBAAqBuE,UAAUC,OAAO,gBACvCE,EAAM,CACN,IAAIG,EAAWzF,KAAKa,sBAAwB,EAC5Cb,KAAKa,sBAAwB4E,EAAWF,EAAqBzD,OAAS2D,EAAW,MAC9E,CACH,IAAIA,EAAWzF,KAAKa,sBAAwB,EAC5Cb,KAAKa,sBAAoC,GAAZ4E,EAAgBA,EAAWF,EAAqBzD,OAAS,EAG9F9B,KAAKY,qBAAuB2E,EAAqBvF,KAAKa,uBAEtDb,KAAKY,qBAAqBuE,UAAUO,IAAI,gBACxC1F,KAAKY,qBAAqBuE,UAAUO,IAAI,cAvRV1E,EA2RtCgD,mBA3RsC,SA2RnBD,EAAepC,EAAUmC,GACxCC,EAAcqB,SACdpF,KAAK0B,SAASC,GAAU,GACxBmC,EAAUZ,KAAK,WAAW,IA9RQlC,EAiStCD,KAjSsC,WAiS/B,IAAA4E,EAAA3F,KACC4F,EAAgBxI,EAAE4C,KAAKE,cAC3B0F,EAAcvC,OACd,IAAIwC,EAAW7F,KAAKE,aAAa2F,SAE7BC,EAAa1I,EAAE,UACd4C,KAAKF,QAAQX,gBACd2G,EAAWrE,SAASzB,KAAKF,QAAQX,gBACrC2G,EAAWC,YAAYH,GAEvB5F,KAAKG,UAAY2F,EAAWE,IAAI,GAEhC,IAAIC,EAAiB7I,EAAE,SAElB4C,KAAKF,QAAQR,mBAMd2G,EAAexE,SAASzB,KAAKF,QAAQR,qBALrC2G,EAAexE,SA1SG,2BA2SlBwE,EAAexB,IAAIxG,GACnBgI,EAAexB,IAAI,aAAczE,KAAKF,QAAQhB,yBAIlDmH,EAAe1B,SAASvE,KAAKG,WAC7BH,KAAKK,cAAgB4F,EAAeD,IAAI,GAEpCJ,EAAcM,SAAS,cACvBD,EAAe1E,YAAY,UAC3B0E,EAAexE,SAAS,aAKxBmE,EAAcM,SAAS,gBACvBD,EAAe1E,YAAY,UAC3B0E,EAAexE,SAAS,eAK5B,IAAI0E,EAAmB/I,EAAE,SACzB4C,KAAKO,gBAAkB4F,EAAiBH,IAAI,GACvChG,KAAKF,QAAQJ,qBAGdyG,EAAiB1E,SAASzB,KAAKF,QAAQJ,sBAFvCyG,EAAiB1B,IAAI/G,GAIzByI,EAAiB5B,SAASvE,KAAKK,eAG/B,IAAI+F,EAAehJ,EAAE,4CAChB4C,KAAKF,QAAQH,iBAIdyG,EAAa3E,SAASzB,KAAKF,QAAQH,mBAHnCyG,EAAa3B,IAAI7G,GACjBwI,EAAa3B,IAAI,QAASzE,KAAKF,QAAQZ,mBAI3CkH,EAAa7B,SAASvE,KAAKO,iBAC3BP,KAAKM,YAAc8F,EAAaJ,IAAI,GAEpC,IAAIK,EAAgBjJ,EAAE,SAASmH,SAASuB,GA4DxC,GA3DA9F,KAAKI,aAAeiG,EAAcL,IAAI,GAEtCK,EAAc5E,SAASzB,KAAKF,QAAQV,mBAEhCY,KAAKQ,OAAS,IAAInD,EAAO2C,KAAKM,YAAaN,KAAKI,aAAc,CAC1DkG,UAAW,eACXC,UAAW,CACPC,gBAAiB,CAACC,SAAQ,GAC1BpD,KAAM,CAACoD,SAAQ,GACfC,KAAM,CAAED,SAAQ,MAc5BrJ,EAAEuJ,UAAUC,MAAM,WACd,GAAKjB,EAAK7F,QAAQjB,MAQX,CACH,IAAIgI,EAAgBjB,EAAchD,KAAK,UACvCiE,EAAchE,KACV,SAACiE,EAAOC,GACJ,IAAI3C,EAAY2C,EAAOhF,MACnBkB,EAAW8D,EAAOtE,KAClBb,EAAYmF,EAAO/E,SACvB2D,EAAKxB,mBAAmBC,EAAWnB,EAAUrB,KAGrD+D,EAAK7E,SAAkC,EAAvB+F,EAAc/E,YAjB9B6D,EAAK7F,QAAQjB,MAAMmI,QAAQ,SAAClE,GACxB,IAAIsB,EAAYtB,EAAKf,MACjBkB,EAAWH,EAAKL,KAChBb,EAAYkB,EAAKlB,UACrB+D,EAAKxB,mBAAmBC,EAAWnB,EAAUrB,KAEjD+D,EAAK7E,SAAuC,EAA5B6E,EAAK7F,QAAQjB,MAAMiD,OAavC6D,EAAKzE,wBAAuB,GAE5BmF,EAAczD,KAAK,MAAMgC,MAAM,SAAArB,GAC3BoC,EAAKrC,kBAAkBC,KAG3B8C,EAAczD,KAAK,MAAMqE,GAAG,YAAa,SAAA1D,GACrCnG,EAAEmG,EAAM2D,QAAQtD,QAAQ,MAAMnC,SAAS,gBAAgBA,SAAS,cAGpE4E,EAAczD,KAAK,MAAMqE,GAAG,WAAY,SAAA1D,GACpCnG,EAAEmG,EAAM2D,QAAQtD,QAAQ,MAAMrC,YAAY,gBAAgBA,YAAY,gBAI1EsE,EACA7F,KAAKM,YAAYuE,MAAMlH,QAAU,OAC7BqC,KAAKF,QAAQP,2BAGb0G,EAAexE,SAASzB,KAAKF,QAAQP,4BAFrC0G,EAAexB,IAAI,CAAC0C,mBAAoBnH,KAAKF,QAAQf,uCAIzDkH,EAAerD,KAAK,UAAUM,KAAK,YAAY,GAC/C+C,EAAexE,eACZ,CACH,IAAI2F,EAAUpH,KAAKE,aAAamH,GAC5BC,EAAa1B,EAAchC,QAAQ,eACvC,GAAyB,GAArB0D,EAAWxF,OAAa,CACxB,IAAIyF,EAASD,EAAW1E,KAAX,cAA8BwE,EAA9B,MACLG,EAAOC,KAAK,QACXxH,KAAKE,aAAamH,KACvBrH,KAAKM,YAAY+G,GAAK,mDAAqDrH,KAAKE,aAAamH,GAC7FE,EAAOC,KAAK,MAAOxH,KAAKM,YAAY+G,KAI5ChB,EAAczB,MAAM,SAACrB,GACjBA,EAAME,oBAGV4C,EAAcY,GAAG,YAAa,WAC1BtB,EAAKvD,4BAGT6D,EAAerB,MAAM,SAACrB,GACW,SAAzBA,EAAM2D,OAAOO,UACbrK,EAAEuI,EAAKrF,aAAa4B,IAAI,IAAIgC,QACD,UAAzBX,EAAM2D,OAAOO,UAAkD,QAAzBlE,EAAM2D,OAAOO,UAA6D,UAAvClE,EAAM2D,OAAOQ,cAAcD,WAA0B9B,EAAK7E,UACrI6E,EAAKnE,iBAIb4E,EAAaa,GAAG,UAAW,SAAC1D,GACL,IAAfA,EAAMoE,OAAgC,IAAjBpE,EAAMqE,SAC3BrE,EAAMC,iBACNmC,EAAKN,cAAa,IAEE,IAAf9B,EAAMoE,OAAgC,IAAjBpE,EAAMqE,SAChCrE,EAAMC,iBACNmC,EAAKN,cAAa,IAEE,IAAf9B,EAAMoE,OAAgC,IAAjBpE,EAAMqE,QAChCrE,EAAMC,iBAEc,GAAfD,EAAMoE,OAA+B,GAAjBpE,EAAMqE,QAC3BjC,EAAKrF,YAAYyB,MACjBwB,EAAMC,iBAGNmC,EAAKxD,iBAIU,GAAfoB,EAAMoE,OAA+B,GAAjBpE,EAAMqE,UAE1BjC,EAAKhF,sBAA4D,GAAnCgF,EAAKrF,YAAYuH,gBAAwD,GAAjClC,EAAKrF,YAAYwH,cAE3FnC,EAAKvD,6BAIbgE,EAAaa,GAAG,QAAS,SAAC1D,GACtB,GAAmB,IAAfA,EAAMoE,OAAgC,IAAjBpE,EAAMqE,SAAgC,GAAfrE,EAAMoE,OAA+B,GAAjBpE,EAAMqE,QAAc,CACpF,GAAIjC,EAAK/E,qBAAsB,CAC3B,IAAImC,EAAQ3F,EAAEuI,EAAK/E,sBACfkD,EAAYf,EAAMH,KAAK,0BACvBjB,EAAWoB,EAAMc,KAAK,aAC1B,GAAKC,EAAUZ,KAAK,WAKb,CACH,IAAIa,EAAgB3G,EAAEuI,EAAKtF,eAAeuC,KAAtB,sBAAiDjB,EAAjD,YACpBgE,EAAK3B,mBAAmBD,EAAepC,EAAUmC,OAPrB,CAC5B,IAAIb,EAAWF,EAAMH,KAAK,SAASH,OACnCkD,EAAK1B,4BAA4BH,EAAWnC,EAAUsB,GACtDa,EAAUZ,KAAK,WAAW,GAC1ByC,EAAKvD,0BAKU,IAAfmB,EAAMoE,OAAgC,IAAjBpE,EAAMqE,SAC3BjC,EAAKxD,qBAITwD,EAAKb,mBAEU,GAAfvB,EAAMoE,OAA+B,GAAjBpE,EAAMqE,SAC1BjC,EAAKxD,qBAEN,GAAmB,GAAfoB,EAAMoE,OAA+B,GAAjBpE,EAAMqE,QAAc,CAC/C,IAAIG,EAAgBpC,EAAKrF,YAAYuH,eAErC,GAAmB,GADDlC,EAAKrF,YAAYwH,cACM,GAAjBC,GAAsBpC,EAAKhF,sBAAuB,CACtE,IAAIsF,EAAiB7I,EAAEuI,EAAKtF,eACxB2H,EAAQ/B,EAAerD,KAAK,MAAM4C,UACtC,GAAoB,GAAhBwC,EAAMlG,OAAa,CACnB,IAAImG,EAAeD,EAAMA,EAAMlG,OAAS,GAEpCH,EADgBvE,EAAE6K,GACOpE,KAAK,aAE9BC,EADQuC,EAAczD,KAAd,sBAAyCjB,EAAzC,YACUiB,KAAK,gCACvBmB,EAAgBkC,EAAerD,KAAf,sBAA0CjB,EAA1C,YACpBgE,EAAK3B,mBAAmBD,EAAepC,EAAUmC,IAGzD6B,EAAKhF,sBAAwB,KAE7BgF,EAAKzE,wBAAuB,QACN,IAAfqC,EAAMoE,OAAgC,IAAjBpE,EAAMqE,SAClCjC,EAAKxD,kBAKbiE,EAAaa,GAAG,QAAS,WACrBtB,EAAKpD,yBACLoD,EAAKnD,qBACDmD,EAAK7E,UACL6E,EAAKzE,wBAAuB,GAC5ByE,EAAKnE,gBAELmE,EAAKrE,iBAIb8E,EAAa8B,QAAQ,WACbjC,EAAeC,SAAS,aAAgBP,EAAK7F,QAAQd,4BACrDiH,EAAexB,IAAI,aAAckB,EAAK7F,QAAQd,6BACvCiH,EAAeC,SAAS,eAAiBP,EAAK7F,QAAQb,+BAC7DgH,EAAexB,IAAI,aAAckB,EAAK7F,QAAQb,+BAElD7B,EAAEuI,EAAKtF,eAAeoB,SAAS,WAGnC2E,EAAa+B,SAAS,WACbxC,EAAKjF,eACNuF,EAAexB,IAAI,aAAc,IACjCrH,EAAEuI,EAAKtF,eAAekB,YAAY,YAI1CuE,EAAWsC,UAAU,WACjBzC,EAAKjF,cAAe,IAGxBtD,EAAED,EAAOwJ,UAAU0B,QAAQ,SAAC9E,GACxBoC,EAAKjF,cAAe,EACdiF,EAAKxF,YAAcoD,EAAM2D,QAAU9J,EAAEkL,SAAS3C,EAAKxF,UAAWoD,EAAM2D,SACtEvB,EAAKxD,oBA7iBiBvC,EAAA,GAojB1C,SAAS2I,EAAgBzI,GACrB,OAAOE,KAAK6C,KAAK,WACb,IAAIgB,EAAOzG,EAAE4C,MAAM6D,KAAKpG,GAExB,IAAKoG,EAAM,CACP,GAAI,eAAe2E,KAAK1I,GACpB,OAGJ+D,EAAO,IAAIjE,EAAOI,KADwB,iBAAZF,EAAsBA,EAAQ,MAE5D1C,EAAE4C,MAAM6D,KAAKpG,EAASoG,GAG1B,GAAuB,iBAAZ/D,EAAsB,CAC7B,IAAI2I,EAAa3I,EACjB,GAAgC,oBAArB+D,EAAK4E,GACZ,MAAM,IAAI1I,UAAJ,oBAAkC0I,EAAlC,KAEV5E,EAAK4E,QAkBjB,OAbArL,EAAEG,GAAGC,GAAc+K,EAGnBnL,EAAEG,GAAGC,EAAWkL,OAAO,GAAGC,cAAgBnL,EAAWoL,MAAM,IAAM,WAC7D,OAAOxL,EAAE4C,MAAM6D,KAAK,UAAYrG,IAGpCJ,EAAEG,GAAGC,GAAYqL,YAAcjJ,EAE/BxC,EAAEG,GAAGC,GAAYsL,WAAa,WAE1B,OADA1L,EAAEG,GAAGC,GAAcF,EACZiL,GAEJ3I,EAxlBY,CAylBpBzC,OAAQC,EAAGC","sourcesContent":["import $ from 'jquery'\nimport Popper from 'popper.js'\n\n// TODO: try to find convinient way to declare private members. Is it convinient enough to move them into IIFE?\nconst BsMultiSelect = ((window, $, Popper) => {\n    const JQUERY_NO_CONFLICT = $.fn[pluginName];\n    const pluginName = 'dashboardCodeBsMultiSelect';\n    const dataKey = `plugin_${pluginName}`;\n\n    const defFilterInputItemStyleSys = {'display': 'block'};\n    const defSelectedPanelClass = 'form-control btn border';\n    const defFilterInputStyle = {'width': '2ch', 'border': '0', 'padding': '0', 'outline': 'none'};\n    const defSelectedPanelStyle = {'cursor': 'text', 'display': 'flex', \"flex-wrap\": \"wrap\", \"align-items\": \"center\", \"margin-bottom\": \"0px\"};\n    const defSelectedItemClass = 'badge';\n    const defSelectedItemStyle = {'padding-left': '0px', 'padding-bottom': '0px', 'display': 'flex', 'align-items': 'center'};\n    const defRemoveSelectedItemButtonClass = 'close';\n    const defRemoveSelectedItemButtonStyle = {'line-height': '1rem', 'font-size':'1.2rem'};\n    const defaults = {\n        items: [],\n        defaults: [],\n        //usePopper: true,\n        selectedPanelMinHeight: 'calc(2.25rem + 2px)',\n        selectedPanelReadonlyBackgroundColor: '#e9ecef',\n        selectedPanelValidBoxShadow: ' 0 0 0 0.2rem rgba(40, 167, 69, 0.25)',\n        selectedPanelInvalidBoxShadow: '0 0 0 0.2rem rgba(220, 53, 69, 0.25)',\n        filterInputColor: '#495057',\n        containerClass: 'dashboardcode-bsmultiselect',\n        dropDownMenuClass: 'dropdown-menu',\n        dropDownItemClass: 'px-2',\n        selectedPanelClass: '',\n        selectedPanelReadonlyClass: '',\n        selectedItemClass: '', \n        removeSelectedItemButtonClass: '',\n        filterInputItemClass: '', \n        filterInputClass: ''\n    };\n\n    class Plugin {\n        constructor(element, options) {\n            if (typeof Popper === 'undefined') {\n                throw new TypeError('DashboardCode bsMultiSelect require Popper.js (https://popper.js.org)')\n            }\n\n            // readonly\n            this.element = element;\n            this.options = $.extend({}, defaults, options);\n            this.hiddenSelect = element;\n            this.container = null;\n            this.dropDownMenu = null;\n            this.selectedPanel = null;\n            this.filterInput = null;\n            this.filterInputItem = null;\n            this.popper = null;\n\n            // state\n            this.filterInputItemOffsetLeft = null;\n            this.skipFocusout = false;\n            this.backspaceAtStartPoint = null;\n            this.selectedDropDownItem = null;\n            this.selectedDropDownIndex = null;\n            this.hasItems = false;\n\n            this.init();\n        }\n\n        updateDropDownPosition(force) {\n            //if (this.options.usePopper) {\n            let offsetLeft = this.filterInputItem.offsetLeft;\n            if (force || this.filterInputItemOffsetLeft!=offsetLeft){\n                this.popper.update();\n                this.filterInputItemOffsetLeft=offsetLeft;\n            }\n            // } else {\n            //     $(this.dropDownMenu).dropdown('update');\n            // }\n        }\n\n        hideDropDown() {\n            //if (this.options.usePopper) {\n                $(this.dropDownMenu).removeClass('show')\n            // } else {\n            //     if ($(this.dropDownMenu).hasClass('show'))\n            //         $(this.dropDownMenu).dropdown('toggle');\n            // }\n        }\n\n        showDropDown() {\n                //if (this.options.usePopper) {\n                    this.updateDropDownPosition(true);\n                    $(this.dropDownMenu).addClass('show')\n                // } else {\n                //     if (!$(this.dropDownMenu).hasClass('show'))\n                //         $(this.dropDownMenu).dropdown('toggle');\n                // }\n        }\n\n        setCheck(optionId, isChecked) {\n            for (let i = 0; i < this.hiddenSelect.options.length; i += 1) {\n                let option = this.hiddenSelect.options[i];\n                if (option.value == optionId) {\n                    this.hiddenSelect.options[i].selected = isChecked;\n                    break;\n                }\n            }\n        }\n\n        // Public methods\n        getInputValue() {\n            return $(this.hiddenSelect).val();\n        }\n\n        closeDropDown() {\n            this.resetSelectDropDownMenu();\n            this.clearFilterInput();\n            this.hideDropDown();\n            this.updateDropDownPosition();\n        }\n\n        clearFilterInput(updatePosition) {\n            if (this.filterInput.value != '') {\n                this.filterInput.value = '';\n                this.adoptFilterInputLength();\n                this.filterDropDownMenu();\n                if (updatePosition && this.hasItems) {\n                    this.updateDropDownPosition(false); \n                } \n            }\n        }\n\n        filterDropDownMenu() {\n            let text = this.filterInput.value.trim();\n            let visible = 0;\n            $(this.dropDownMenu).find('li').each((i, item) => {\n                let $item = $(item);\n                if (text == '') {\n                    $item.show();\n                    visible++;\n                }\n                else {\n                    let itemText = $item.text();\n                    let $checkbox = $item.find('input[type=\"checkbox\"]');\n                    \n                    if (!$checkbox.prop('checked') && itemText.toLowerCase().indexOf(text.toLowerCase())>=0) {\n                        $item.show();\n                        visible++;\n                    } else {\n                        $item.hide();\n                    }\n                }\n            });\n            this.hasItems = visible > 0;\n            this.resetSelectDropDownMenu();\n        }\n\n        clickDropDownItem(event) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            let $menuItem = $(event.currentTarget).closest(\"LI\");\n            let optionId  = $menuItem.data(\"option-id\");\n            let $checkBox = $menuItem.find('input[type=\"checkbox\"]');\n            if ($checkBox.prop('checked')) {\n                let $selectedItem = $(this.selectedPanel).find(`li[data-option-id=\"${optionId}\"]`);\n                this.removeSelectedItem($selectedItem, optionId, $checkBox);\n            } else {\n                let itemText = $menuItem.find('label').text();\n                this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n                $checkBox.prop('checked', true);\n            }\n            this.clearFilterInput(false);\n            this.filterInput.focus();\n        }\n        \n        appendDropDownItem(itemValue, itemText, isChecked) {\n            let optionId = itemValue;\n            let checkBoxId = `dashboardcode-bsmultiselect-${this.hiddenSelect.name.toLowerCase()}-generated-id-${optionId.toLowerCase()}`;\n            let checked = isChecked ? \"checked\" : \"\";\n            let $dropDownItem = $(\n                `<li data-option-id=\"${optionId}\">\n                    <div class=\"custom-control custom-checkbox\">\n                        <input type=\"checkbox\" class=\"custom-control-input\" id=\"${checkBoxId}\" ${checked}>\n                        <label class=\"custom-control-label\" for=\"${checkBoxId}\">${itemText}</label>\n                    </div>\n                 </li>`).addClass(this.options.dropDownItemClass).appendTo($(this.dropDownMenu));\n            \n            let $checkBox = $dropDownItem.find(`input[type=\"checkbox\"]`);\n            if (isChecked) {\n                this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n            }\n        }\n        \n        createAndAppendSelectedItem($checkBox, optionId, itemText) {\n            let $selectedItem = $(`<li data-option-id=\"${optionId}\"><span>${itemText}</span></li>`);\n            if (!this.options.selectedItemClass){\n                $selectedItem.addClass(defSelectedItemClass);\n                $selectedItem.css(defSelectedItemStyle)\n            }else{\n                $selectedItem.addClass(this.options.selectedItemClass);\n            }\n                \n            $selectedItem.insertBefore($(this.filterInputItem));\n            let $buttom = $(\"<button aria-label='Close' tabIndex='-1' type='button'><span aria-hidden='true'>&times;</span></button>\");\n            if (!this.options.removeSelectedItemButtonClass){\n                $buttom.addClass(defRemoveSelectedItemButtonClass);\n                $buttom.css(defRemoveSelectedItemButtonStyle);\n            }\n            else{\n                $buttom.addClass(this.options.removeSelectedItemButtonClass)\n            }\n            \n            $buttom.appendTo($selectedItem); \n            this.setCheck(optionId, true);\n\n            $buttom.click(() => {\n                this.removeSelectedItem($selectedItem, optionId, $checkBox);\n                this.clearFilterInput(true);\n                this.updateDropDownPosition(false);\n                $(this.filterInput).focus();\n            });\n        }\n\n        adoptFilterInputLength() {\n            this.filterInput.style.width = this.filterInput.value.length*1.3 + 2 + \"ch\";\n        }\n\n        analyzeInputText() {\n            let text = this.filterInput.value.trim().toLowerCase();\n            let nodeList = this.dropDownMenu.querySelectorAll(\"LI\");\n            let item = null;\n            for (let i = 0; i < nodeList.length; ++i) {\n                let it = nodeList[i];\n                if (it.textContent.trim().toLowerCase() == text)\n                {\n                    item=it;\n                    break;\n                }\n            }\n            if (item) {\n                let $item = $(item);\n                let $checkBox = $item.find('input[type=\"checkbox\"]');\n                if (!$checkBox.prop('checked')) {\n                    let optionId = $item.data('option-id');\n                    let itemText = $item.find('label').text();\n                    this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n                    $checkBox.prop('checked', true);\n                }\n                this.clearFilterInput(true);\n            }\n        }\n\n        resetSelectDropDownMenu() {\n            if (this.selectedDropDownItem !== null) {\n                this.selectedDropDownItem.classList.remove('bg-light');\n                this.selectedDropDownItem.classList.remove('text-primary');\n                this.selectedDropDownItem = null;\n            }\n            this.selectedDropDownIndex = null;\n        }\n        \n        keydownArrow(down) {\n            let visibleNodeListArray = $(this.dropDownMenu).find('LI:not([style*=\"display: none\"])').toArray();\n            if (visibleNodeListArray.length > 0) {\n                if (this.hasItems) {\n                    this.showDropDown();\n                }\n                if (this.selectedDropDownItem === null) {\n                    this.selectedDropDownIndex = down ? 0 : visibleNodeListArray.length - 1;\n                }\n                else {\n                    // IE10-11 doesn't support multiple arguments in classList remove \n                    this.selectedDropDownItem.classList.remove('bg-light');\n                    this.selectedDropDownItem.classList.remove('text-primary');\n                    if (down) {\n                        let newIndex = this.selectedDropDownIndex + 1;\n                        this.selectedDropDownIndex = newIndex < visibleNodeListArray.length ? newIndex : 0;\n                    } else {\n                        let newIndex = this.selectedDropDownIndex - 1;\n                        this.selectedDropDownIndex = newIndex >= 0 ? newIndex : visibleNodeListArray.length - 1;\n                    }\n                }\n                this.selectedDropDownItem = visibleNodeListArray[this.selectedDropDownIndex];\n                // IE10-11 doesn't support multiple arguments in classList add \n                this.selectedDropDownItem.classList.add('text-primary');\n                this.selectedDropDownItem.classList.add('bg-light');\n            }\n        }\n\n        removeSelectedItem($selectedItem, optionId, $checkBox) {\n            $selectedItem.remove();\n            this.setCheck(optionId, false);\n            $checkBox.prop('checked', false);\n        }\n\n        init() {\n            let $hiddenSelect = $(this.hiddenSelect);\n            $hiddenSelect.hide();\n            let disabled = this.hiddenSelect.disabled;\n\n            let $container = $(\"<div/>\");\n            if (!this.options.containerClass)\n                $container.addClass(this.options.containerClass);\n            $container.insertAfter($hiddenSelect);\n                \n            this.container = $container.get(0);\n\n            let $selectedPanel = $(\"<ul/>\");\n\n            if (!this.options.selectedPanelClass){\n                $selectedPanel.addClass(defSelectedPanelClass);\n                $selectedPanel.css(defSelectedPanelStyle);\n                $selectedPanel.css(\"min-height\", this.options.selectedPanelMinHeight);\n            }\n            else\n                $selectedPanel.addClass(this.options.selectedPanelClass);\n            $selectedPanel.appendTo(this.container);\n            this.selectedPanel = $selectedPanel.get(0);\n\n            if ($hiddenSelect.hasClass(\"is-valid\")){\n                $selectedPanel.removeClass(\"border\");\n                $selectedPanel.addClass(\"is-valid\");\n                //$selectedPanel.removeClass(\"btn-outline-danger\");\n                //$selectedPanel.addClass(\"btn-outline-success\");\n            }\n            \n            if ($hiddenSelect.hasClass(\"is-invalid\")){\n                $selectedPanel.removeClass(\"border\");\n                $selectedPanel.addClass(\"is-invalid\");\n                //$selectedPanel.removeClass(\"btn-outline-success\");\n                //$selectedPanel.addClass(\"btn-outline-danger\");\n            }\n\n            let $filterInputItem = $('<li/>');\n            this.filterInputItem = $filterInputItem.get(0)\n            if (!this.options.filterInputItemClass)\n                $filterInputItem.css(defFilterInputItemStyleSys)\n            else\n                $filterInputItem.addClass(this.options.filterInputItemClass)\n            \n            $filterInputItem.appendTo(this.selectedPanel);\n            \n\n            let $filterInput = $('<input type=\"search\" autocomplete=\"off\">');\n            if (!this.options.filterInputClass){\n                $filterInput.css(defFilterInputStyle);\n                $filterInput.css(\"color\", this.options.filterInputColor);\n            } else {\n                $filterInput.addClass(this.options.filterInputClass);\n            }\n            $filterInput.appendTo(this.filterInputItem);\n            this.filterInput = $filterInput.get(0);\n\n            let $dropDownMenu = $(\"<ul/>\").appendTo($container);\n            this.dropDownMenu = $dropDownMenu.get(0);\n\n            $dropDownMenu.addClass(this.options.dropDownMenuClass);\n            //if (this.options.usePopper) {\n                this.popper = new Popper(this.filterInput, this.dropDownMenu, {\n                    placement: 'bottom-start',\n                    modifiers: {\n                        preventOverflow: {enabled:false},\n                        hide: {enabled:false},\n                        flip: { enabled:false }\n                     }\n                });\n            // } else {\n            //     $(this.dropDownMenu).addClass(\"dropdown dropdown-menu\")\n            //     $(this.dropDownMenu).data(\"\", \"\");\n            //     $(this.dropDownMenu).dropdown({\n            //         placement: 'bottom-start',\n            //         flip: false,\n            //         reference: this.filterInput\n            //     });\n            // }\n            \n            // some browsers (IE11) can change select value (\"autocomplet\") after page is loaded but before \"ready\" event\n            $(document).ready(() => {\n                if (!this.options.items) {\n                    this.options.items.forEach((item) => {\n                        let itemValue = item.value;\n                        let itemText = item.text;\n                        let isChecked = item.isChecked;\n                        this.appendDropDownItem(itemValue, itemText, isChecked);\n                    });\n                    this.hasItems = this.options.items.length > 0;\n                } else {\n                    let selectOptions = $hiddenSelect.find('option');\n                    selectOptions.each(\n                        (index, option) => {\n                            let itemValue = option.value;\n                            let itemText = option.text;\n                            let isChecked = option.selected;\n                            this.appendDropDownItem(itemValue, itemText, isChecked);\n                        }\n                    );\n                    this.hasItems = selectOptions.length > 0;\n                }\n                this.updateDropDownPosition(false);\n\n                $dropDownMenu.find('li').click(event => {\n                    this.clickDropDownItem(event);\n                });\n\n                $dropDownMenu.find(\"li\").on(\"mouseover\", event => {\n                    $(event.target).closest(\"li\").addClass('text-primary').addClass('bg-light')\n                });\n\n                $dropDownMenu.find(\"li\").on(\"mouseout\", event => {\n                    $(event.target).closest(\"li\").removeClass('text-primary').removeClass('bg-light')\n                });\n            });\n\n            if (disabled) {\n                this.filterInput.style.display = \"none\";\n                if(!this.options.selectedPanelReadonlyClass){\n                    $selectedPanel.css({\"background-color\": this.options.selectedPanelReadonlyBackgroundColor});\n                }else{\n                    $selectedPanel.addClass(this.options.selectedPanelReadonlyClass);\n                }\n                $selectedPanel.find('button').prop(\"disabled\", true);\n                $selectedPanel.addClass();\n            } else {\n                let inputId = this.hiddenSelect.id;\n                let $formGroup = $hiddenSelect.closest(\".form-group\");\n                if ($formGroup.length == 1) {\n                    let $label = $formGroup.find(`label[for=\"${inputId}\"]`);\n                    let f = $label.attr(\"for\");\n                    if (f == this.hiddenSelect.id) {\n                        this.filterInput.id = \"dashboardcode-bsmultiselect-generated-filter-id-\" + this.hiddenSelect.id;\n                        $label.attr(\"for\", this.filterInput.id);\n                    }\n                }\n\n                $dropDownMenu.click((event) => {\n                    event.stopPropagation();\n                });\n\n                $dropDownMenu.on(\"mouseover\", () => {\n                    this.resetSelectDropDownMenu();\n                });\n\n                $selectedPanel.click((event) => {\n                    if (event.target.nodeName != \"INPUT\")\n                        $(this.filterInput).val('').focus();\n                    if (!(event.target.nodeName == \"BUTTON\" || (event.target.nodeName == \"SPAN\" && event.target.parentElement.nodeName == \"BUTTON\")) && this.hasItems)\n                        this.showDropDown();\n                });\n\n\n                $filterInput.on(\"keydown\", (event) => {\n                    if (event.which == 38 || event.keyCode == 38) {\n                        event.preventDefault();\n                        this.keydownArrow(false);\n                    }\n                    else if (event.which == 40 || event.keyCode == 40) {\n                        event.preventDefault()\n                        this.keydownArrow(true);\n                    }\n                    else if (event.which == 13 || event.keyCode == 13) {\n                        event.preventDefault();\n                    }\n                    else if (event.which == 9 || event.keyCode == 9) {\n                        if (this.filterInput.value) {\n                            event.preventDefault();\n                        }\n                        else {\n                            this.closeDropDown();\n                        }\n                    }\n                    else {\n                        if (event.which == 8 || event.keyCode == 8) {\n                            // detect that backspace is at start of input field (this will be used at keydown)\n                            this.backspaceAtStartPoint = (this.filterInput.selectionStart == 0 && this.filterInput.selectionEnd == 0);\n                        }\n                        this.resetSelectDropDownMenu();\n                    }\n                });\n\n                $filterInput.on(\"keyup\", (event) => {\n                    if (event.which == 13 || event.keyCode == 13 || event.which == 9 || event.keyCode == 9) {\n                        if (this.selectedDropDownItem) {\n                            let $item = $(this.selectedDropDownItem);\n                            let $checkBox = $item.find('input[type=\"checkbox\"]');\n                            let optionId = $item.data('option-id');\n                            if (!$checkBox.prop('checked')) {\n                                let itemText = $item.find('label').text();\n                                this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n                                $checkBox.prop('checked', true);\n                                this.resetSelectDropDownMenu();\n                            } else {\n                                let $selectedItem = $(this.selectedPanel).find(`LI[data-option-id=\"${optionId}\"]:first`);\n                                this.removeSelectedItem($selectedItem, optionId, $checkBox);\n                            }\n                            if (event.which == 13 || event.keyCode == 13) {\n                                this.closeDropDown();\n                            }\n                            //this.resetSelectDropDownMenu();\n                        } else {\n                            this.analyzeInputText();\n                        }\n                        if (event.which == 9 || event.keyCode == 9) {\n                            this.closeDropDown();\n                        }\n                    } else if (event.which == 8 || event.keyCode == 8) {\n                        let startPosition = this.filterInput.selectionStart;\n                        let endPosition = this.filterInput.selectionEnd;\n                        if (endPosition == 0 && startPosition == 0 && this.backspaceAtStartPoint) {\n                            let $selectedPanel = $(this.selectedPanel);\n                            let array = $selectedPanel.find(\"LI\").toArray();\n                            if (array.length >= 2) {\n                                let itemToDelete = array[array.length - 2];\n                                let $itemToDelete = $(itemToDelete);\n                                let optionId = $itemToDelete.data(\"option-id\");\n                                let $item = $dropDownMenu.find(`LI[data-option-id=\"${optionId}\"]:first`);\n                                let $checkBox = $item.find('input[type=\"checkbox\"]:first');\n                                let $selectedItem = $selectedPanel.find(`LI[data-option-id=\"${optionId}\"]:first`);\n                                this.removeSelectedItem($selectedItem, optionId, $checkBox);\n                            }\n                        }\n                        this.backspaceAtStartPoint = null;\n                        //if ($dropDownMenu.is(':hidden'))\n                        this.updateDropDownPosition(false);\n                    } else if (event.which == 27 || event.keyCode == 27) { // escape\n                        this.closeDropDown();\n                    }\n                });\n\n                // Set on change for filter input\n                $filterInput.on('input', () => { \n                    this.adoptFilterInputLength();\n                    this.filterDropDownMenu();\n                    if (this.hasItems) {\n                        this.updateDropDownPosition(false); // we need it to support case when textbox changes its place because of line break (texbox grow with each key press)\n                        this.showDropDown();\n                    } else {\n                        this.hideDropDown();\n                    }\n                });\n\n                $filterInput.focusin(() => {\n                    if ($selectedPanel.hasClass(\"is-valid\") &&  this.options.selectedPanelValidBoxShadow){\n                        $selectedPanel.css(\"box-shadow\", this.options.selectedPanelValidBoxShadow);              \n                    } else if ($selectedPanel.hasClass(\"is-invalid\") && this.options.selectedPanelInvalidBoxShadow){\n                        $selectedPanel.css(\"box-shadow\", this.options.selectedPanelInvalidBoxShadow);\n                    }\n                    $(this.selectedPanel).addClass(\"focus\");\n                });\n\n                $filterInput.focusout(() => {\n                    if (!this.skipFocusout) {\n                        $selectedPanel.css(\"box-shadow\", \"\" );                \n                        $(this.selectedPanel).removeClass(\"focus\");\n                    }\n                });\n\n                $container.mousedown(() => {\n                    this.skipFocusout = true;\n                });\n\n                $(window.document).mouseup((event) => {\n                    this.skipFocusout = false;\n                    if (!(this.container === event.target || $.contains(this.container, event.target))) {\n                        this.closeDropDown();\n                    }\n                });\n            }\n        }\n    }\n\n    function jQueryInterface(options) {\n        return this.each(function () {\n            let data = $(this).data(dataKey)\n\n            if (!data) {\n                if (/dispose|hide/.test(options)) {\n                    return;\n                }\n                const optionsObject = (typeof options === 'object')?options:null;\n                data = new Plugin(this, optionsObject);\n                $(this).data(dataKey, data);\n            }\n\n            if (typeof options === 'string') {\n                let methodName = options;\n                if (typeof data[methodName] === 'undefined') {\n                    throw new TypeError(`No method named \"${methodName}\"`)\n                }\n                data[methodName]()\n            }\n        })\n    }\n\n    $.fn[pluginName] = jQueryInterface;\n\n    // in case of mulitple $(this) it will return 1st element plugin instance\n    $.fn[pluginName.charAt(0).toUpperCase() + pluginName.slice(1)] = function () {\n        return $(this).data(\"plugin_\" + pluginName);\n    };\n\n    $.fn[pluginName].Constructor = Plugin;\n\n    $.fn[pluginName].noConflict = function () {\n        $.fn[pluginName] = JQUERY_NO_CONFLICT\n        return jQueryInterface;\n    }\n    return Plugin;\n})(window, $, Popper);\n\nexport default BsMultiSelect;\n"]}