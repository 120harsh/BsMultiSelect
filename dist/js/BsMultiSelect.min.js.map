{"version":3,"sources":["../../js/src/BsMultiSelect.es8.js"],"names":["window","$","Popper","JQUERY_NO_CONFLICT","fn","pluginName","dataKey","defFilterInputItemStyleSys","display","defFilterInputStyle","width","border","padding","outline","defSelectedPanelStyle","cursor","flex-wrap","align-items","margin-bottom","defSelectedItemStyle","padding-left","defRemoveSelectedItemButtonStyle","font-size","defaults","items","selectedPanelMinHeight","selectedPanelReadonlyBackgroundColor","selectedPanelValidBoxShadow","selectedPanelInvalidBoxShadow","filterInputColor","containerClass","dropDownMenuClass","dropDownItemClass","selectedPanelClass","selectedPanelReadonlyClass","selectedItemClass","removeSelectedItemButtonClass","filterInputItemClass","filterInputClass","Plugin","element","options","_classCallCheck","this","TypeError","extend","input","container","dropDownMenu","selectedPanel","filterInput","filterInputItem","popper","skipFocusout","backspaceAtStartPoint","selectedDropDownItem","selectedDropDownIndex","hasItems","init","key","value","update","removeClass","addClass","optionId","isChecked","i","length","selected","val","resetSelectDropDownMenu","clearFilterInput","hideDropDown","updateDropDownPosition","filterDropDownMenu","text","trim","visible","find","each","$item","show","itemText","prop","toLowerCase","includes","hide","event","preventDefault","stopPropagation","menuItem","currentTarget","closest","$menuItem","data","$checkBox","$selectedItem","concat","removeSelectedItem","createAndAppendSelectedItem","focus","itemValue","checkBoxId","name","checked","appendTo","_this","css","insertBefore","$buttom","setCheck","click","style","item","_toConsumableArray","querySelectorAll","textContent","classList","remove","down","showDropDown","newIndex","add","_this2","$input","disabled","$container","insertAfter","get","$selectedPanel","hasClass","$filterInputItem","$filterInput","$dropDownMenu","placement","modifiers","flip","behavior","selectOptions","index","option","appendDropDownItem","forEach","background-color","inputId","id","formGroup","label","querySelector","attr","setAttribute","clickDropDownItem","on","target","nodeName","parentElement","which","keyCode","keydownArrow","closeDropDown","selectionStart","selectionEnd","analyzeInputText","startPosition","array","itemToDelete","dataset","adoptFilterInputLength","focusin","focusout","mousedown","document","mouseup","contains","jQueryInterface","test","optionsObject","_typeof","methodName","charAt","toUpperCase","slice","Constructor","noConflict"],"mappings":"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","sourcesContent":["import $ from 'jquery'\nimport Popper from 'popper.js'\n\n// TODO: \n// 2) require polyfill Element.closest polyfill IE 11\n// 3) require multiple classList.add polyfill IE 11\n\n// IIFE to declare private members\nconst BsMultiSelect = ((window, $, Popper) => {\n    const JQUERY_NO_CONFLICT = $.fn[pluginName];\n    const pluginName = 'dashboardCodeBsMultiSelect';\n    const dataKey = `plugin_${pluginName}`;\n\n    const defFilterInputItemStyleSys = {'display': 'block'};\n    const defSelectedPanelClass = 'form-control btn border';\n    const defFilterInputStyle = {'width': '2ch', 'border': '0', 'padding': '0', 'outline': 'none'};\n    const defSelectedPanelStyle = {'cursor': 'text', 'display': 'flex', \"flex-wrap\": \"wrap\", \"align-items\": \"center\", \"margin-bottom\": \"0px\"};\n    const defSelectedItemClass = 'badge';\n    const defSelectedItemStyle = {'padding-left': '0px', 'display': 'flex', 'align-items': 'center'};\n    const defRemoveSelectedItemButtonClass = 'close';\n    const defRemoveSelectedItemButtonStyle = {'font-size': '100%'};\n    const defaults = {\n        items: [],\n        defaults: [],\n        //usePopper: true,\n        selectedPanelMinHeight: 'calc(2.25rem + 2px)',\n        selectedPanelReadonlyBackgroundColor: '#e9ecef',\n        selectedPanelValidBoxShadow: ' 0 0 0 0.2rem rgba(40, 167, 69, 0.25)',\n        selectedPanelInvalidBoxShadow: '0 0 0 0.2rem rgba(220, 53, 69, 0.25)',\n        filterInputColor: '#495057',\n        containerClass: 'dashboardcode-bsmultiselect',\n        dropDownMenuClass: 'dropdown-menu',\n        dropDownItemClass: 'px-2',\n        selectedPanelClass: '',\n        selectedPanelReadonlyClass: '',\n        selectedItemClass: '', \n        removeSelectedItemButtonClass: '',\n        filterInputItemClass: '', \n        filterInputClass: ''\n    };\n\n    class Plugin {\n        constructor(element, options) {\n            if (typeof Popper === 'undefined') {\n                throw new TypeError('DashboardCode bsMultiSelect require Popper.js (https://popper.js.org)')\n            }\n\n            // readonly\n            this.element = element;\n            this.options = $.extend({}, defaults, options);\n            this.input = element;\n            this.container = null;\n            this.dropDownMenu = null;\n            this.selectedPanel = null;\n            this.filterInput = null;\n            this.filterInputItem = null;\n            this.popper = null;\n\n            // state\n            this.skipFocusout = false;\n            this.backspaceAtStartPoint = null;\n            this.selectedDropDownItem = null;\n            this.selectedDropDownIndex = null;\n            this.hasItems = false;\n\n            this.init();\n        }\n\n        updateDropDownPosition() {\n            //console.log('updateDropDownPosition');\n            //if (this.options.usePopper) {\n                this.popper.update();\n            // } else {\n            //     $(this.dropDownMenu).dropdown('update');\n            // }\n        }\n\n        hideDropDown() {\n            //if (this.options.usePopper) {\n                //console.log('popper remove show');\n                $(this.dropDownMenu).removeClass('show')\n            // } else {\n            //     if ($(this.dropDownMenu).hasClass('show'))\n            //         $(this.dropDownMenu).dropdown('toggle');\n            // }\n        }\n\n        showDropDown() {\n            if (this.hasItems) {\n                //if (this.options.usePopper) {\n                    //console.log('popper add show');\n                    $(this.dropDownMenu).addClass('show')\n                // } else {\n                //     if (!$(this.dropDownMenu).hasClass('show'))\n                //         $(this.dropDownMenu).dropdown('toggle');\n                // }\n            }\n        }\n\n        setCheck(optionId, isChecked) {\n            for (let i = 0; i < this.input.options.length; i += 1) {\n                let option = this.input.options[i];\n                if (option.value == optionId) {\n                    this.input.options[i].selected = isChecked;\n                    break;\n                }\n            }\n        }\n\n        // Public methods\n        getInputValue() {\n            return $(this.input).val();\n        }\n\n        closeDropDown() {\n            this.resetSelectDropDownMenu();\n            this.clearFilterInput();\n            this.hideDropDown();\n            this.updateDropDownPosition();\n        }\n\n\n        clearFilterInput() {\n            if (this.filterInput.value != '') {\n                this.filterInput.value = '';\n                this.filterDropDownMenu();\n                if (this.hasItems) {\n                    this.updateDropDownPosition(); \n                } \n            }\n        }\n\n        filterDropDownMenu() {\n            let text = this.filterInput.value.trim();\n            let visible = 0;\n            $(this.dropDownMenu).find('li').each(function () {\n                let $item = $(this);\n                if (text == '') {\n                    $item.show();\n                    visible++;\n                }\n                else {\n                    let itemText = $item.text();\n                    let $checkbox = $item.find('input[type=\"checkbox\"]');\n                    \n                    if (!$checkbox.prop('checked') && itemText.toLowerCase().includes(text.toLowerCase())) {\n                        $item.show();\n                        visible++;\n                    } else {\n                        $item.hide();\n                    }\n                }\n            });\n            this.hasItems = visible > 0;\n            this.resetSelectDropDownMenu();\n        }\n\n        clickDropDownItem(event) {\n            //console.log(\"filter & stopPropagation\");\n            event.preventDefault();\n            event.stopPropagation();\n\n            let menuItem = event.currentTarget.closest(\"LI\");\n            let $menuItem = $(menuItem);\n            let optionId = $menuItem.data(\"option-id\");\n            let $checkBox = $menuItem.find('input[type=\"checkbox\"]');\n            if ($checkBox.prop('checked')) {\n                let $selectedItem = $(this.selectedPanel).find(`li[data-option-id=\"${optionId}\"]`);\n                this.removeSelectedItem($selectedItem, optionId, $checkBox);\n            } else {\n                let itemText = $menuItem.find('label').text();\n                this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n                $checkBox.prop('checked', true);\n            }\n            this.clearFilterInput();\n            $(this.filterInput).focus();\n        }\n\n        \n        appendDropDownItem(itemValue, itemText, isChecked) {\n            let optionId = itemValue;\n            let checkBoxId = `dashboardcode-bsmultiselect-${this.input.name.toLowerCase()}-generated-id-${optionId.toLowerCase()}`;\n            let checked = isChecked ? \"checked\" : \"\";\n            let $dropDownItem = $(\n                `<li data-option-id=\"${optionId}\">\n                    <div class=\"custom-control custom-checkbox\">\n                        <input type=\"checkbox\" class=\"custom-control-input\" id=\"${checkBoxId}\" ${checked}>\n                        <label class=\"custom-control-label\" for=\"${checkBoxId}\">${itemText}</label>\n                    </div>\n                 </li>`).addClass(this.options.dropDownItemClass).appendTo($(this.dropDownMenu));\n\n            let $checkBox = $dropDownItem.find(`input[type=\"checkbox\"]`);\n            if (isChecked) {\n                this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n            }\n        }\n        \n        createAndAppendSelectedItem($checkBox, optionId, itemText) {\n            let $selectedItem = $(`<li data-option-id=\"${optionId}\"><span>${itemText}</span></li>`);\n            if (!this.options.selectedItemClass){\n                $selectedItem.addClass(defSelectedItemClass);\n                $selectedItem.css(defSelectedItemStyle)\n            }else{\n                $selectedItem.addClass(this.options.selectedItemClass);\n            }\n                \n            $selectedItem.insertBefore($(this.filterInputItem));\n            let $buttom = $(\"<button aria-label='Close' tabIndex='-1' type='button'><span aria-hidden='true'>&times;</span></button>\");\n            if (!this.options.removeSelectedItemButtonClass){\n                $buttom.addClass(defRemoveSelectedItemButtonClass);\n                $buttom.css(defRemoveSelectedItemButtonStyle);\n            }\n            else{\n                $buttom.addClass(this.options.removeSelectedItemButtonClass)\n            }\n            \n            $buttom.appendTo($selectedItem); \n            this.setCheck(optionId, true);\n\n            $buttom.click(() => {\n                this.removeSelectedItem($selectedItem, optionId, $checkBox)\n                this.updateDropDownPosition();\n                $(this.filterInput).focus();\n            });\n        }\n\n        adoptFilterInputLength() {\n            this.filterInput.style.width = this.filterInput.value.length*1.3 + 2 + \"ch\";\n        }\n\n        analyzeInputText() {\n            let text = this.filterInput.value.trim().toLowerCase();\n            let item = [...this.dropDownMenu.querySelectorAll(\"LI\")]\n                .find((i) => i.textContent.trim().toLowerCase() == text);\n            if (item) {\n                let $item = $(item);\n                let $checkBox = $item.find('input[type=\"checkbox\"]');\n                if (!$checkBox.prop('checked')) {\n                    let optionId = $item.data('option-id');\n                    let itemText = $item.find('label').text();\n                    this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n                    $checkBox.prop('checked', true);\n                }\n                this.clearFilterInput();\n            }\n        }\n\n        resetSelectDropDownMenu() {\n            if (this.selectedDropDownItem !== null) {\n                // IE11 doesn't support remove('text-primary', bg-light' )\n                this.selectedDropDownItem.classList.remove('bg-light');\n                this.selectedDropDownItem.classList.remove('text-primary');\n                this.selectedDropDownItem = null;\n            }\n            this.selectedDropDownIndex = null;\n        }\n        \n        keydownArrow(down) {\n            let items = [...this.dropDownMenu.querySelectorAll('LI:not([style*=\"display: none\"]')];\n            if (items.length > 0) {\n                this.showDropDown();\n                if (this.selectedDropDownItem === null) {\n                    this.selectedDropDownIndex = down ? 0 : items.length - 1;\n                }\n                else {\n                    // IE11 doesn't support remove('text-primary', bg-light' )\n                    this.selectedDropDownItem.classList.remove('bg-light');\n                    this.selectedDropDownItem.classList.remove('text-primary');\n                    if (down) {\n                        let newIndex = this.selectedDropDownIndex + 1;\n                        this.selectedDropDownIndex = newIndex < items.length ? newIndex : 0;\n                    } else {\n                        let newIndex = this.selectedDropDownIndex - 1;\n                        this.selectedDropDownIndex = newIndex >= 0 ? newIndex : items.length - 1;\n                    }\n                }\n                this.selectedDropDownItem = items[this.selectedDropDownIndex];\n                // IE11 doesn't support add('text-primary', bg-light' )\n                this.selectedDropDownItem.classList.add('text-primary');\n                this.selectedDropDownItem.classList.add('bg-light');\n            }\n        }\n\n        removeSelectedItem($selectedItem, optionId, $checkBox) {\n            $selectedItem.remove();\n            this.setCheck(optionId, false);\n            $checkBox.prop('checked', false);\n        }\n\n        init() {\n            let $input = $(this.input);\n            $input.hide();\n            let disabled = this.input.disabled;\n\n            let $container = $(\"<div/>\");\n            if (!this.options.containerClass)\n                $container.addClass(this.options.containerClass);\n            $container.insertAfter($input);\n                \n            this.container = $container.get(0);\n\n            let $selectedPanel = $(\"<ul/>\");\n\n            if (!this.options.selectedPanelClass){\n                $selectedPanel.addClass(defSelectedPanelClass);\n                $selectedPanel.css(defSelectedPanelStyle);\n                $selectedPanel.css(\"min-height\", this.options.selectedPanelMinHeight);\n            }\n            else\n                $selectedPanel.addClass(this.options.selectedPanelClass);\n            $selectedPanel.appendTo($container);\n            this.selectedPanel = $selectedPanel.get(0);\n\n            if ($input.hasClass(\"is-valid\")){\n                $selectedPanel.removeClass(\"border\");\n                $selectedPanel.addClass(\"is-valid\");\n                //$selectedPanel.removeClass(\"btn-outline-danger\");\n                //$selectedPanel.addClass(\"btn-outline-success\");\n            }\n            \n            if ($input.hasClass(\"is-invalid\")){\n                $selectedPanel.removeClass(\"border\");\n                $selectedPanel.addClass(\"is-invalid\");\n                //$selectedPanel.removeClass(\"btn-outline-success\");\n                //$selectedPanel.addClass(\"btn-outline-danger\");\n            }\n\n            let $filterInputItem = $('<li/>');\n            this.filterInputItem = $filterInputItem.get(0)\n            if (!this.options.filterInputItemClass)\n                $filterInputItem.css(defFilterInputItemStyleSys)\n            else\n                $filterInputItem.addClass(this.options.filterInputItemClass)\n            \n            $filterInputItem.appendTo($selectedPanel);\n            \n\n            let $filterInput = $('<input type=\"search\" autocomplete=\"off\">');\n            if (!this.options.filterInputClass){\n                $filterInput.css(defFilterInputStyle);\n                $filterInput.css(\"color\", this.options.filterInputColor);\n            } else {\n                $filterInput.addClass(this.options.filterInputClass);\n            }\n            $filterInput.appendTo($filterInputItem);\n            this.filterInput = $filterInput.get(0)\n\n            let $dropDownMenu = $(\"<ul/>\").appendTo($container);\n            this.dropDownMenu = $dropDownMenu.get(0);\n\n            $dropDownMenu.addClass(this.options.dropDownMenuClass);\n            //if (this.options.usePopper) {\n                this.popper = new Popper(this.filterInput, this.dropDownMenu, {\n                    placement: 'bottom-start',\n                    modifiers: {\n                        flip: {\n                            behavior: ['left', 'right']\n                        }\n                    }\n                });\n            // } else {\n            //     $(this.dropDownMenu).addClass(\"dropdown dropdown-menu\")\n            //     $(this.dropDownMenu).data(\"\", \"\");\n            //     $(this.dropDownMenu).dropdown({\n            //         placement: 'bottom-start',\n            //         flip: false,\n            //         reference: this.filterInput\n            //     });\n            // }\n\n            if (!this.options.items) {\n                this.options.items.forEach((item) => {\n                    let itemValue = item.value;\n                    let itemText = item.text;\n                    let isChecked = item.isChecked;\n                    this.appendDropDownItem(itemValue, itemText, isChecked);\n                });\n                this.hasItems = this.options.items.length > 0;\n            } else {\n                let selectOptions = $input.find('option');\n                selectOptions.each(\n                    (index, option) => {\n                        let itemValue = option.value;\n                        let itemText = option.text;\n                        let isChecked = option.selected;\n                        this.appendDropDownItem(itemValue, itemText, isChecked);\n                    }\n                );\n                this.hasItems = selectOptions.length > 0;\n            }\n            if (disabled) {\n                this.filterInput.style.display = \"none\";\n                if(!this.options.selectedPanelReadonlyClass){\n                    $selectedPanel.css({\"background-color\": this.options.selectedPanelReadonlyBackgroundColor});\n                }else{\n                    $selectedPanel.addClass(this.options.selectedPanelReadonlyClass);\n                }\n                $selectedPanel.find('button').prop(\"disabled\", true);\n                $selectedPanel.addClass();\n            } else {\n                let inputId = this.input.id;\n                let formGroup = this.input.closest(\".form-group\");\n                if (formGroup) {\n                    let label = formGroup.querySelector(`label[for=\"${inputId}\"]`);\n                    let f = $(label).attr(\"for\");\n                    if (f == this.input.id) {\n                        this.filterInput.id = \"dashboardcode-bsmultiselect-generated-filter-id-\" + this.input.id;\n                        label.setAttribute(\"for\", this.filterInput.id);\n                    }\n                }\n\n                this.updateDropDownPosition();\n\n                $dropDownMenu.click((event) => {\n                    //console.log('dropDownMenu click - stopPropagation')\n                    event.stopPropagation();\n                });\n\n                $dropDownMenu.find('li').click((event) => {\n                    this.clickDropDownItem(event);\n                });\n\n                $dropDownMenu.on(\"mouseover\", () => {\n                    this.resetSelectDropDownMenu();\n                });\n\n                $dropDownMenu.find(\"li\").on(\"mouseover\", (event) => {\n                    event.target.closest(\"li\").classList.add('text-primary');\n                    event.target.closest(\"li\").classList.add('bg-light');\n                });\n\n                $dropDownMenu.find(\"li\").on(\"mouseout\", (event) => {\n                    event.target.closest(\"li\").classList.remove('text-primary');\n                    event.target.closest(\"li\").classList.remove('bg-light');\n                });\n\n                $selectedPanel.click((event) => {\n                    //console.log('selectedPanel click ' + event.target.nodeName);\n                    if (event.target.nodeName != \"INPUT\")\n                        $(this.filterInput).val('').focus();\n                    if (!(event.target.nodeName == \"BUTTON\" || (event.target.nodeName == \"SPAN\" && event.target.parentElement.nodeName == \"BUTTON\")))\n                        this.showDropDown();\n                });\n\n\n                $filterInput.on(\"keydown\", (event) => {\n                    if (event.which == 38 || event.keyCode == 38) {\n                        event.preventDefault();\n                        this.keydownArrow(false);\n                    }\n                    else if (event.which == 40 || event.keyCode == 40) {\n                        event.preventDefault()\n                        this.keydownArrow(true);\n                    }\n                    else if (event.which == 13 || event.keyCode == 13) {\n                        event.preventDefault();\n                    }\n                    else if (event.which == 9 || event.keyCode == 9){\n                        if (this.filterInput.value){\n                            event.preventDefault();\n                        }else{\n                            this.closeDropDown();\n                        }\n                    }\n                    else {\n                        if (event.which == 8 || event.keyCode == 8) {\n                            // detect that backspace is at start of input field (this will be used at keydown)\n                            this.backspaceAtStartPoint = (this.filterInput.selectionStart == 0 && this.filterInput.selectionEnd == 0);\n                        }\n                        this.resetSelectDropDownMenu();\n                    }\n                });\n\n                $filterInput.on(\"keyup\", (event) => {\n                    if (event.which == 13 || event.keyCode == 13 || event.which == 9 || event.keyCode == 9) {\n                        if (this.selectedDropDownItem) {\n                            let $item = $(this.selectedDropDownItem);\n                            let $checkBox = $item.find('input[type=\"checkbox\"]');\n                            let optionId = $item.data('option-id');\n                            if (!$checkBox.prop('checked')) {\n                                let itemText = $item.find('label').text();\n                                this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n                                $checkBox.prop('checked', true);\n                                this.filterInput.value = \"\";\n                            } else {\n                                let $selectedItem = $(this.selectedPanel).find(`li[data-option-id=\"${optionId}\"]`);\n                                this.removeSelectedItem($selectedItem, optionId, $checkBox);\n                            }\n                            //this.resetSelectDropDownMenu();\n                        } else {\n                            this.analyzeInputText();\n                        }\n                        if (event.which == 9 || event.keyCode == 9){\n                            this.closeDropDown();\n                        }\n                    } else if (event.which == 8 || event.keyCode == 8) {\n                        let startPosition = this.filterInput.selectionStart;\n                        let endPosition = this.filterInput.selectionEnd;\n                        if (endPosition == 0 && startPosition == 0 && this.backspaceAtStartPoint) {\n                            let array = [...this.selectedPanel.querySelectorAll(\"LI\")];\n                            if (array.length >= 2) {\n                                let itemToDelete = array[array.length - 2];\n                                let $itemToDelete = $(itemToDelete);\n                                let optionId = $itemToDelete.data(\"option-id\");\n                                let item = [...this.dropDownMenu.querySelectorAll(\"LI\")]\n                                    .find((i) => i.dataset.optionId == optionId);\n                                let $item = $(item);\n                                let $checkBox = $item.find('input[type=\"checkbox\"]');\n                                let $selectedItem = $(this.selectedPanel).find(`li[data-option-id=\"${optionId}\"]`);\n                                this.removeSelectedItem($selectedItem, optionId, $checkBox);\n                            }\n                        }\n                        this.backspaceAtStartPoint = null;\n                    } else if (event.which == 27 || event.keyCode == 27) { // escape\n                        this.closeDropDown();\n                    }\n                });\n\n                // Set on change for filter input\n                $filterInput.on('input', () => { // keyup focus\n                    //console.log('filterInput input');\n                    this.adoptFilterInputLength();\n                    this.filterDropDownMenu();\n                    if (this.hasItems) {\n                        this.updateDropDownPosition(); // support case when textbox can change its place because of line break (texbox grow with each key press)\n                        this.showDropDown();\n                    } else {\n                        this.hideDropDown();\n                    }\n                });\n\n                $filterInput.focusin(() => {\n                    if($selectedPanel.hasClass(\"is-valid\") &&  this.options.selectedPanelValidBoxShadow ){\n                        $selectedPanel.css(\"box-shadow\", this.options.selectedPanelValidBoxShadow );              \n                    }else if ($selectedPanel.hasClass(\"is-invalid\") && this.options.selectedPanelInvalidBoxShadow){\n                        $selectedPanel.css(\"box-shadow\", this.options.selectedPanelInvalidBoxShadow );\n                    }\n                    $(this.selectedPanel).addClass(\"focus\");\n                });\n\n                $filterInput.focusout(() => {\n                    if (!this.skipFocusout)\n                    {\n                        $selectedPanel.css(\"box-shadow\", \"\" );                \n                        $(this.selectedPanel).removeClass(\"focus\");\n                    }\n                });\n\n                $container.mousedown(() => {\n                    this.skipFocusout = true;\n\n                });\n\n                $(window.document).mouseup((event) => {\n                    this.skipFocusout = false;\n                    if (!(this.container === event.target || this.container.contains(event.target))) {\n                        //console.log(\"document mouseup outside container\");\n                        this.closeDropDown();\n                    }\n                });\n            }\n        }\n    }\n\n    function jQueryInterface(options) {\n        return this.each(function () {\n            let data = $(this).data(dataKey)\n\n            if (!data) {\n                if (/dispose|hide/.test(options)) {\n                    return;\n                }\n                const optionsObject = (typeof options === 'object')?options:null;\n                data = new Plugin(this, optionsObject);\n                $(this).data(dataKey, data);\n            }\n\n            if (typeof options === 'string') {\n                let methodName = options;\n                if (typeof data[methodName] === 'undefined') {\n                    throw new TypeError(`No method named \"${methodName}\"`)\n                }\n                data[methodName]()\n            }\n        })\n    }\n\n    $.fn[pluginName] = jQueryInterface;\n\n    // in case of mulitple $(this) it will return 1st element plugin instance\n    $.fn[pluginName.charAt(0).toUpperCase() + pluginName.slice(1)] = function () {\n        return $(this).data(\"plugin_\" + pluginName);\n    };\n\n    $.fn[pluginName].Constructor = Plugin;\n\n    $.fn[pluginName].noConflict = function () {\n        $.fn[pluginName] = JQUERY_NO_CONFLICT\n        return jQueryInterface;\n    }\n    return Plugin;\n})(window, $, Popper);\n\nexport default BsMultiSelect;\n"]}