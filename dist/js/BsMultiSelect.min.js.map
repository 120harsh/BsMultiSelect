{"version":3,"sources":["../../js/src/BsMultiSelect.es8.js"],"names":["window","$","Popper","JQUERY_NO_CONFLICT","fn","pluginName","dataKey","defFilterInputItemStyleSys","display","defFilterInputStyle","width","border","padding","outline","defSelectedPanelStyle","cursor","flex-wrap","align-items","margin-bottom","defSelectedItemStyle","padding-left","padding-bottom","defRemoveSelectedItemButtonStyle","line-height","font-size","defaults","items","selectedPanelMinHeight","selectedPanelReadonlyBackgroundColor","selectedPanelValidBoxShadow","selectedPanelInvalidBoxShadow","filterInputColor","containerClass","dropDownMenuClass","dropDownItemClass","selectedPanelClass","selectedPanelReadonlyClass","selectedItemClass","removeSelectedItemButtonClass","filterInputItemClass","filterInputClass","Plugin","element","options","TypeError","this","extend","hiddenSelect","container","dropDownMenu","selectedPanel","filterInput","filterInputItem","popper","filterInputItemOffsetLeft","skipFocusout","backspaceAtStartPoint","selectedDropDownItem","selectedDropDownIndex","hasItems","init","_proto","prototype","updateDropDownPosition","force","offsetLeft","update","hideDropDown","hide","showDropDown","show","setCheck","optionId","isChecked","i","length","value","selected","getInputValue","val","closeDropDown","resetSelectDropDownMenu","clearFilterInput","updatePosition","adoptFilterInputLength","filterDropDownMenu","text","trim","visible","find","each","item","$item","itemText","prop","toLowerCase","indexOf","clickDropDownItem","event","preventDefault","stopPropagation","$menuItem","currentTarget","closest","data","$checkBox","$selectedItem","removeSelectedItem","createAndAppendSelectedItem","focus","appendDropDownItem","itemValue","checkBoxId","name","addClass","appendTo","_this","css","insertBefore","$buttom","click","style","analyzeInputText","nodeList","querySelectorAll","it","textContent","classList","remove","keydownArrow","down","visibleNodeListArray","toArray","newIndex","add","_this2","$hiddenSelect","disabled","$container","insertAfter","get","$selectedPanel","hasClass","removeClass","$filterInputItem","$filterInput","$dropDownMenu","list-style-type","placement","modifiers","preventOverflow","enabled","flip","document","ready","selectOptions","index","option","forEach","on","target","background-color","inputId","id","$formGroup","$label","attr","nodeName","parentElement","which","keyCode","selectionStart","selectionEnd","startPosition","array","itemToDelete","focusin","focusout","mousedown","mouseup","contains","jQueryInterface","test","methodName","charAt","toUpperCase","slice","Constructor","noConflict"],"mappings":"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","sourcesContent":["import $ from 'jquery'\nimport Popper from 'popper.js'\n\n// TODO: try to find convinient way to declare private members. Is it convinient enough to move them into IIFE?\nconst BsMultiSelect = ((window, $, Popper) => {\n    const JQUERY_NO_CONFLICT = $.fn[pluginName];\n    const pluginName = 'dashboardCodeBsMultiSelect';\n    const dataKey = `plugin_${pluginName}`;\n\n    const defFilterInputItemStyleSys = {'display': 'block'};\n    const defSelectedPanelClass = 'form-control btn border';\n    const defFilterInputStyle = {'width': '2ch', 'border': '0', 'padding': '0', 'outline': 'none'};\n    const defSelectedPanelStyle = {'cursor': 'text', 'display': 'flex', \"flex-wrap\": \"wrap\", \"align-items\": \"center\", \"margin-bottom\": \"0px\"};\n    const defSelectedItemClass = 'badge';\n    const defSelectedItemStyle = {'padding-left': '0px', 'padding-bottom': '0px', 'display': 'flex', 'align-items': 'center'};\n    const defRemoveSelectedItemButtonClass = 'close';\n    const defRemoveSelectedItemButtonStyle = {'line-height': '1rem', 'font-size':'1.2rem'};\n    const defaults = {\n        items: [],\n        defaults: [],\n        //usePopper: true,\n        selectedPanelMinHeight: 'calc(2.25rem + 2px)',\n        selectedPanelReadonlyBackgroundColor: '#e9ecef',\n        selectedPanelValidBoxShadow: ' 0 0 0 0.2rem rgba(40, 167, 69, 0.25)',\n        selectedPanelInvalidBoxShadow: '0 0 0 0.2rem rgba(220, 53, 69, 0.25)',\n        filterInputColor: '#495057',\n        containerClass: 'dashboardcode-bsmultiselect',\n        dropDownMenuClass: 'dropdown-menu',\n        dropDownItemClass: 'px-2',\n        selectedPanelClass: '',\n        selectedPanelReadonlyClass: '',\n        selectedItemClass: '', \n        removeSelectedItemButtonClass: '',\n        filterInputItemClass: '', \n        filterInputClass: ''\n    };\n\n    class Plugin {\n        constructor(element, options) {\n            if (typeof Popper === 'undefined') {\n                throw new TypeError('DashboardCode bsMultiSelect require Popper.js (https://popper.js.org)')\n            }\n\n            // readonly\n            this.element = element;\n            this.options = $.extend({}, defaults, options);\n            this.hiddenSelect = element;\n            this.container = null;\n            this.dropDownMenu = null;\n            this.selectedPanel = null;\n            this.filterInput = null;\n            this.filterInputItem = null;\n            this.popper = null;\n\n            // state\n            this.filterInputItemOffsetLeft = null;\n            this.skipFocusout = false;\n            this.backspaceAtStartPoint = null;\n            this.selectedDropDownItem = null;\n            this.selectedDropDownIndex = null;\n            this.hasItems = false;\n\n            this.init();\n        }\n\n        updateDropDownPosition(force) {\n            //if (this.options.usePopper) {\n            let offsetLeft = this.filterInputItem.offsetLeft;\n            if (force || this.filterInputItemOffsetLeft!=offsetLeft){\n                this.popper.update();\n                this.filterInputItemOffsetLeft=offsetLeft;\n            }\n            // } else {\n            //     $(this.dropDownMenu).dropdown('update');\n            // }\n        }\n\n        hideDropDown() {\n            //if (this.options.usePopper) {\n                $(this.dropDownMenu).hide()\n            // } else {\n            //     if ($(this.dropDownMenu).hasClass('show'))\n            //         $(this.dropDownMenu).dropdown('toggle');\n            // }\n        }\n\n        showDropDown() {\n                //if (this.options.usePopper) {\n                    this.updateDropDownPosition(true);\n                    $(this.dropDownMenu).show()\n                // } else {\n                //     if (!$(this.dropDownMenu).hasClass('show'))\n                //         $(this.dropDownMenu).dropdown('toggle');\n                // }\n        }\n\n        setCheck(optionId, isChecked) {\n            for (let i = 0; i < this.hiddenSelect.options.length; i += 1) {\n                let option = this.hiddenSelect.options[i];\n                if (option.value == optionId) {\n                    this.hiddenSelect.options[i].selected = isChecked;\n                    break;\n                }\n            }\n        }\n\n        // Public methods\n        getInputValue() {\n            return $(this.hiddenSelect).val();\n        }\n\n        closeDropDown() {\n            this.resetSelectDropDownMenu();\n            this.clearFilterInput();\n            this.hideDropDown();\n            this.updateDropDownPosition();\n        }\n\n        clearFilterInput(updatePosition) {\n            if (this.filterInput.value != '') {\n                this.filterInput.value = '';\n                this.adoptFilterInputLength();\n                this.filterDropDownMenu();\n                if (updatePosition && this.hasItems) {\n                    this.updateDropDownPosition(false); \n                } \n            }\n        }\n\n        filterDropDownMenu() {\n            let text = this.filterInput.value.trim();\n            let visible = 0;\n            $(this.dropDownMenu).find('li').each((i, item) => {\n                let $item = $(item);\n                if (text == '') {\n                    $item.show();\n                    visible++;\n                }\n                else {\n                    let itemText = $item.text();\n                    let $checkbox = $item.find('input[type=\"checkbox\"]');\n                    \n                    if (!$checkbox.prop('checked') && itemText.toLowerCase().indexOf(text.toLowerCase())>=0) {\n                        $item.show();\n                        visible++;\n                    } else {\n                        $item.hide();\n                    }\n                }\n            });\n            this.hasItems = visible > 0;\n            this.resetSelectDropDownMenu();\n        }\n\n        clickDropDownItem(event) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            let $menuItem = $(event.currentTarget).closest(\"LI\");\n            let optionId  = $menuItem.data(\"option-id\");\n            let $checkBox = $menuItem.find('input[type=\"checkbox\"]');\n            if ($checkBox.prop('checked')) {\n                let $selectedItem = $(this.selectedPanel).find(`li[data-option-id=\"${optionId}\"]`);\n                this.removeSelectedItem($selectedItem, optionId, $checkBox);\n            } else {\n                let itemText = $menuItem.find('label').text();\n                this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n                $checkBox.prop('checked', true);\n            }\n            this.clearFilterInput(false);\n            this.filterInput.focus();\n        }\n        \n        appendDropDownItem(itemValue, itemText, isChecked) {\n            let optionId = itemValue;\n            let checkBoxId = `dashboardcode-bsmultiselect-${this.hiddenSelect.name.toLowerCase()}-generated-id-${optionId.toLowerCase()}`;\n            let checked = isChecked ? \"checked\" : \"\";\n            let $dropDownItem = $(\n                `<li data-option-id=\"${optionId}\">\n                    <div class=\"custom-control custom-checkbox\">\n                        <input type=\"checkbox\" class=\"custom-control-input\" id=\"${checkBoxId}\" ${checked}>\n                        <label class=\"custom-control-label\" for=\"${checkBoxId}\">${itemText}</label>\n                    </div>\n                 </li>`).addClass(this.options.dropDownItemClass).appendTo($(this.dropDownMenu));\n            \n            let $checkBox = $dropDownItem.find(`input[type=\"checkbox\"]`);\n            if (isChecked) {\n                this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n            }\n        }\n        \n        createAndAppendSelectedItem($checkBox, optionId, itemText) {\n            let $selectedItem = $(`<li data-option-id=\"${optionId}\"><span>${itemText}</span></li>`);\n            if (!this.options.selectedItemClass){\n                $selectedItem.addClass(defSelectedItemClass);\n                $selectedItem.css(defSelectedItemStyle)\n            }else{\n                $selectedItem.addClass(this.options.selectedItemClass);\n            }\n                \n            $selectedItem.insertBefore($(this.filterInputItem));\n            let $buttom = $(\"<button aria-label='Close' tabIndex='-1' type='button'><span aria-hidden='true'>&times;</span></button>\");\n            if (!this.options.removeSelectedItemButtonClass){\n                $buttom.addClass(defRemoveSelectedItemButtonClass);\n                $buttom.css(defRemoveSelectedItemButtonStyle);\n            }\n            else{\n                $buttom.addClass(this.options.removeSelectedItemButtonClass)\n            }\n            \n            $buttom.appendTo($selectedItem); \n            this.setCheck(optionId, true);\n\n            $buttom.click(() => {\n                this.removeSelectedItem($selectedItem, optionId, $checkBox);\n                this.clearFilterInput(true);\n                this.updateDropDownPosition(false);\n                $(this.filterInput).focus();\n            });\n        }\n\n        adoptFilterInputLength() {\n            this.filterInput.style.width = this.filterInput.value.length*1.3 + 2 + \"ch\";\n        }\n\n        analyzeInputText() {\n            let text = this.filterInput.value.trim().toLowerCase();\n            let nodeList = this.dropDownMenu.querySelectorAll(\"LI\");\n            let item = null;\n            for (let i = 0; i < nodeList.length; ++i) {\n                let it = nodeList[i];\n                if (it.textContent.trim().toLowerCase() == text)\n                {\n                    item=it;\n                    break;\n                }\n            }\n            if (item) {\n                let $item = $(item);\n                let $checkBox = $item.find('input[type=\"checkbox\"]');\n                if (!$checkBox.prop('checked')) {\n                    let optionId = $item.data('option-id');\n                    let itemText = $item.find('label').text();\n                    this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n                    $checkBox.prop('checked', true);\n                }\n                this.clearFilterInput(true);\n            }\n        }\n\n        resetSelectDropDownMenu() {\n            if (this.selectedDropDownItem !== null) {\n                this.selectedDropDownItem.classList.remove('bg-light');\n                this.selectedDropDownItem.classList.remove('text-primary');\n                this.selectedDropDownItem = null;\n            }\n            this.selectedDropDownIndex = null;\n        }\n        \n        keydownArrow(down) {\n            let visibleNodeListArray = $(this.dropDownMenu).find('LI:not([style*=\"display: none\"])').toArray();\n            if (visibleNodeListArray.length > 0) {\n                if (this.hasItems) {\n                    this.showDropDown();\n                }\n                if (this.selectedDropDownItem === null) {\n                    this.selectedDropDownIndex = down ? 0 : visibleNodeListArray.length - 1;\n                }\n                else {\n                    // IE10-11 doesn't support multiple arguments in classList remove \n                    this.selectedDropDownItem.classList.remove('bg-light');\n                    this.selectedDropDownItem.classList.remove('text-primary');\n                    if (down) {\n                        let newIndex = this.selectedDropDownIndex + 1;\n                        this.selectedDropDownIndex = newIndex < visibleNodeListArray.length ? newIndex : 0;\n                    } else {\n                        let newIndex = this.selectedDropDownIndex - 1;\n                        this.selectedDropDownIndex = newIndex >= 0 ? newIndex : visibleNodeListArray.length - 1;\n                    }\n                }\n                this.selectedDropDownItem = visibleNodeListArray[this.selectedDropDownIndex];\n                // IE10-11 doesn't support multiple arguments in classList add \n                this.selectedDropDownItem.classList.add('text-primary');\n                this.selectedDropDownItem.classList.add('bg-light');\n            }\n        }\n\n        removeSelectedItem($selectedItem, optionId, $checkBox) {\n            $selectedItem.remove();\n            this.setCheck(optionId, false);\n            $checkBox.prop('checked', false);\n        }\n\n        init() {\n            let $hiddenSelect = $(this.hiddenSelect);\n            $hiddenSelect.hide();\n            let disabled = this.hiddenSelect.disabled;\n\n            let $container = $(\"<div/>\");\n            $container.addClass(this.options.containerClass);\n            $container.insertAfter($hiddenSelect);\n                \n            this.container = $container.get(0);\n\n            let $selectedPanel = $(\"<ul/>\");\n\n            if (!this.options.selectedPanelClass){\n                $selectedPanel.addClass(defSelectedPanelClass);\n                $selectedPanel.css(defSelectedPanelStyle);\n                $selectedPanel.css(\"min-height\", this.options.selectedPanelMinHeight);\n            }\n            else\n                $selectedPanel.addClass(this.options.selectedPanelClass);\n            $selectedPanel.appendTo(this.container);\n            this.selectedPanel = $selectedPanel.get(0);\n\n            if ($hiddenSelect.hasClass(\"is-valid\")){\n                $selectedPanel.removeClass(\"border\");\n                $selectedPanel.addClass(\"is-valid\");\n                //$selectedPanel.removeClass(\"btn-outline-danger\");\n                //$selectedPanel.addClass(\"btn-outline-success\");\n            }\n            \n            if ($hiddenSelect.hasClass(\"is-invalid\")){\n                $selectedPanel.removeClass(\"border\");\n                $selectedPanel.addClass(\"is-invalid\");\n                //$selectedPanel.removeClass(\"btn-outline-success\");\n                //$selectedPanel.addClass(\"btn-outline-danger\");\n            }\n\n            let $filterInputItem = $('<li/>');\n            this.filterInputItem = $filterInputItem.get(0)\n            if (!this.options.filterInputItemClass)\n                $filterInputItem.css(defFilterInputItemStyleSys)\n            else\n                $filterInputItem.addClass(this.options.filterInputItemClass)\n            \n            $filterInputItem.appendTo(this.selectedPanel);\n            \n\n            let $filterInput = $('<input type=\"search\" autocomplete=\"off\">');\n            if (!this.options.filterInputClass){\n                $filterInput.css(defFilterInputStyle);\n                $filterInput.css(\"color\", this.options.filterInputColor);\n            } else {\n                $filterInput.addClass(this.options.filterInputClass);\n            }\n            $filterInput.appendTo(this.filterInputItem);\n            this.filterInput = $filterInput.get(0);\n\n            let $dropDownMenu = $(\"<ul/>\")\n                .css({\"display\":\"none\"})\n                .appendTo($container);\n            this.dropDownMenu = $dropDownMenu.get(0);\n\n            $dropDownMenu.addClass(this.options.dropDownMenuClass);\n            // prevent heavy understandable styling error\n            $dropDownMenu.css({\"list-style-type\":\"none\"});\n            //if (this.options.usePopper) {\n                this.popper = new Popper(this.filterInput, this.dropDownMenu, {\n                    placement: 'bottom-start',\n                    modifiers: {\n                        preventOverflow: {enabled:false},\n                        hide: {enabled:false},\n                        flip: { enabled:false }\n                     }\n                });\n            // } else {\n            //     $(this.dropDownMenu).addClass(\"dropdown dropdown-menu\")\n            //     $(this.dropDownMenu).data(\"\", \"\");\n            //     $(this.dropDownMenu).dropdown({\n            //         placement: 'bottom-start',\n            //         flip: false,\n            //         reference: this.filterInput\n            //     });\n            // }\n            \n            // some browsers (IE11) can change select value (\"autocomplet\") after page is loaded but before \"ready\" event\n            $(document).ready(() => {\n                if (!this.options.items) {\n                    this.options.items.forEach((item) => {\n                        let itemValue = item.value;\n                        let itemText = item.text;\n                        let isChecked = item.isChecked;\n                        this.appendDropDownItem(itemValue, itemText, isChecked);\n                    });\n                    this.hasItems = this.options.items.length > 0;\n                } else {\n                    let selectOptions = $hiddenSelect.find('option');\n                    selectOptions.each(\n                        (index, option) => {\n                            let itemValue = option.value;\n                            let itemText = option.text;\n                            let isChecked = option.selected;\n                            this.appendDropDownItem(itemValue, itemText, isChecked);\n                        }\n                    );\n                    this.hasItems = selectOptions.length > 0;\n                }\n                this.updateDropDownPosition(false);\n\n                $dropDownMenu.find('li').click(event => {\n                    this.clickDropDownItem(event);\n                });\n\n                $dropDownMenu.find(\"li\").on(\"mouseover\", event => {\n                    $(event.target).closest(\"li\").addClass('text-primary').addClass('bg-light')\n                });\n\n                $dropDownMenu.find(\"li\").on(\"mouseout\", event => {\n                    $(event.target).closest(\"li\").removeClass('text-primary').removeClass('bg-light')\n                });\n            });\n\n            if (disabled) {\n                this.filterInput.style.display = \"none\";\n                if(!this.options.selectedPanelReadonlyClass){\n                    $selectedPanel.css({\"background-color\": this.options.selectedPanelReadonlyBackgroundColor});\n                }else{\n                    $selectedPanel.addClass(this.options.selectedPanelReadonlyClass);\n                }\n                $selectedPanel.find('button').prop(\"disabled\", true);\n                $selectedPanel.addClass();\n            } else {\n                let inputId = this.hiddenSelect.id;\n                let $formGroup = $hiddenSelect.closest(\".form-group\");\n                if ($formGroup.length == 1) {\n                    let $label = $formGroup.find(`label[for=\"${inputId}\"]`);\n                    let f = $label.attr(\"for\");\n                    if (f == this.hiddenSelect.id) {\n                        this.filterInput.id = \"dashboardcode-bsmultiselect-generated-filter-id-\" + this.hiddenSelect.id;\n                        $label.attr(\"for\", this.filterInput.id);\n                    }\n                }\n\n                $dropDownMenu.click((event) => {\n                    event.stopPropagation();\n                });\n\n                $dropDownMenu.on(\"mouseover\", () => {\n                    this.resetSelectDropDownMenu();\n                });\n\n                $selectedPanel.click((event) => {\n                    if (event.target.nodeName != \"INPUT\")\n                        $(this.filterInput).val('').focus();\n                    if (!(event.target.nodeName == \"BUTTON\" || (event.target.nodeName == \"SPAN\" && event.target.parentElement.nodeName == \"BUTTON\")) && this.hasItems)\n                        this.showDropDown();\n                });\n\n\n                $filterInput.on(\"keydown\", (event) => {\n                    if (event.which == 38 || event.keyCode == 38) {\n                        event.preventDefault();\n                        this.keydownArrow(false);\n                    }\n                    else if (event.which == 40 || event.keyCode == 40) {\n                        event.preventDefault()\n                        this.keydownArrow(true);\n                    }\n                    else if (event.which == 13 || event.keyCode == 13) {\n                        event.preventDefault();\n                    }\n                    else if (event.which == 9 || event.keyCode == 9) {\n                        if (this.filterInput.value) {\n                            event.preventDefault();\n                        }\n                        else {\n                            this.closeDropDown();\n                        }\n                    }\n                    else {\n                        if (event.which == 8 || event.keyCode == 8) {\n                            // detect that backspace is at start of input field (this will be used at keydown)\n                            this.backspaceAtStartPoint = (this.filterInput.selectionStart == 0 && this.filterInput.selectionEnd == 0);\n                        }\n                        this.resetSelectDropDownMenu();\n                    }\n                });\n\n                $filterInput.on(\"keyup\", (event) => {\n                    if (event.which == 13 || event.keyCode == 13 || event.which == 9 || event.keyCode == 9) {\n                        if (this.selectedDropDownItem) {\n                            let $item = $(this.selectedDropDownItem);\n                            let $checkBox = $item.find('input[type=\"checkbox\"]');\n                            let optionId = $item.data('option-id');\n                            if (!$checkBox.prop('checked')) {\n                                let itemText = $item.find('label').text();\n                                this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n                                $checkBox.prop('checked', true);\n                                this.resetSelectDropDownMenu();\n                            } else {\n                                let $selectedItem = $(this.selectedPanel).find(`LI[data-option-id=\"${optionId}\"]:first`);\n                                this.removeSelectedItem($selectedItem, optionId, $checkBox);\n                            }\n                            if (event.which == 13 || event.keyCode == 13) {\n                                this.closeDropDown();\n                            }\n                            //this.resetSelectDropDownMenu();\n                        } else {\n                            this.analyzeInputText();\n                        }\n                        if (event.which == 9 || event.keyCode == 9) {\n                            this.closeDropDown();\n                        }\n                    } else if (event.which == 8 || event.keyCode == 8) {\n                        let startPosition = this.filterInput.selectionStart;\n                        let endPosition = this.filterInput.selectionEnd;\n                        if (endPosition == 0 && startPosition == 0 && this.backspaceAtStartPoint) {\n                            let $selectedPanel = $(this.selectedPanel);\n                            let array = $selectedPanel.find(\"LI\").toArray();\n                            if (array.length >= 2) {\n                                let itemToDelete = array[array.length - 2];\n                                let $itemToDelete = $(itemToDelete);\n                                let optionId = $itemToDelete.data(\"option-id\");\n                                let $item = $dropDownMenu.find(`LI[data-option-id=\"${optionId}\"]:first`);\n                                let $checkBox = $item.find('input[type=\"checkbox\"]:first');\n                                let $selectedItem = $selectedPanel.find(`LI[data-option-id=\"${optionId}\"]:first`);\n                                this.removeSelectedItem($selectedItem, optionId, $checkBox);\n                            }\n                        }\n                        this.backspaceAtStartPoint = null;\n                        //if ($dropDownMenu.is(':hidden'))\n                        this.updateDropDownPosition(false);\n                    } else if (event.which == 27 || event.keyCode == 27) { // escape\n                        this.closeDropDown();\n                    }\n                });\n\n                // Set on change for filter input\n                $filterInput.on('input', () => { \n                    this.adoptFilterInputLength();\n                    this.filterDropDownMenu();\n                    if (this.hasItems) {\n                        this.updateDropDownPosition(false); // we need it to support case when textbox changes its place because of line break (texbox grow with each key press)\n                        this.showDropDown();\n                    } else {\n                        this.hideDropDown();\n                    }\n                });\n\n                $filterInput.focusin(() => {\n                    if ($selectedPanel.hasClass(\"is-valid\") &&  this.options.selectedPanelValidBoxShadow){\n                        $selectedPanel.css(\"box-shadow\", this.options.selectedPanelValidBoxShadow);              \n                    } else if ($selectedPanel.hasClass(\"is-invalid\") && this.options.selectedPanelInvalidBoxShadow){\n                        $selectedPanel.css(\"box-shadow\", this.options.selectedPanelInvalidBoxShadow);\n                    }\n                    $(this.selectedPanel).addClass(\"focus\");\n                });\n\n                $filterInput.focusout(() => {\n                    if (!this.skipFocusout) {\n                        $selectedPanel.css(\"box-shadow\", \"\" );                \n                        $(this.selectedPanel).removeClass(\"focus\");\n                    }\n                });\n\n                $container.mousedown(() => {\n                    this.skipFocusout = true;\n                });\n\n                $(window.document).mouseup((event) => {\n                    this.skipFocusout = false;\n                    if (!(this.container === event.target || $.contains(this.container, event.target))) {\n                        this.closeDropDown();\n                    }\n                });\n            }\n        }\n    }\n\n    function jQueryInterface(options) {\n        return this.each(function () {\n            let data = $(this).data(dataKey)\n\n            if (!data) {\n                if (/dispose|hide/.test(options)) {\n                    return;\n                }\n                const optionsObject = (typeof options === 'object')?options:null;\n                data = new Plugin(this, optionsObject);\n                $(this).data(dataKey, data);\n            }\n\n            if (typeof options === 'string') {\n                let methodName = options;\n                if (typeof data[methodName] === 'undefined') {\n                    throw new TypeError(`No method named \"${methodName}\"`)\n                }\n                data[methodName]()\n            }\n        })\n    }\n\n    $.fn[pluginName] = jQueryInterface;\n\n    // in case of mulitple $(this) it will return 1st element plugin instance\n    $.fn[pluginName.charAt(0).toUpperCase() + pluginName.slice(1)] = function () {\n        return $(this).data(\"plugin_\" + pluginName);\n    };\n\n    $.fn[pluginName].Constructor = Plugin;\n\n    $.fn[pluginName].noConflict = function () {\n        $.fn[pluginName] = JQUERY_NO_CONFLICT\n        return jQueryInterface;\n    }\n    return Plugin;\n})(window, $, Popper);\n\nexport default BsMultiSelect;\n"]}