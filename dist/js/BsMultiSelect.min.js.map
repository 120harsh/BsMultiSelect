{"version":3,"sources":["../../js/src/BsMultiSelect.es8.js"],"names":["window","$","Popper","JQUERY_NO_CONFLICT","fn","pluginName","dataKey","defFilterInputItemStyleSys","display","defFilterInputStyle","width","border","padding","outline","defSelectedPanelStyle","cursor","flex-wrap","align-items","margin-bottom","defSelectedItemStyle","padding-left","defRemoveSelectedItemButtonStyle","font-size","defaults","items","selectedPanelMinHeight","selectedPanelReadonlyBackgroundColor","selectedPanelValidBoxShadow","selectedPanelInvalidBoxShadow","filterInputColor","containerClass","dropDownMenuClass","dropDownItemClass","selectedPanelClass","selectedPanelReadonlyClass","selectedItemClass","removeSelectedItemButtonClass","filterInputItemClass","filterInputClass","Plugin","element","options","TypeError","this","extend","input","container","dropDownMenu","selectedPanel","filterInput","filterInputItem","popper","skipFocusout","stopChangePropogation","backspaceAtStartPoint","selectedDropDownItem","selectedDropDownIndex","hasItems","init","_proto","prototype","updateDropDownPosition","update","hideDropDown","removeClass","showDropDown","addClass","setCheck","optionId","isChecked","i","length","value","selected","getInputValue","val","closeDropDown","resetSelectDropDownMenu","clearFilterInput","filterDropDownMenu","text","trim","visible","find","each","item","$item","show","itemText","prop","toLowerCase","indexOf","hide","clickDropDownItem","event","preventDefault","stopPropagation","$menuItem","currentTarget","closest","data","$checkBox","$selectedItem","removeSelectedItem","createAndAppendSelectedItem","focus","appendDropDownItem","itemValue","checkBoxId","name","appendTo","_this","css","insertBefore","$buttom","click","adoptFilterInputLength","style","analyzeInputText","nodeList","querySelectorAll","it","textContent","classList","remove","keydownArrow","down","visibleNodeListArray","toArray","newIndex","add","_this2","$input","disabled","$container","insertAfter","get","$selectedPanel","hasClass","$filterInputItem","$filterInput","$dropDownMenu","placement","modifiers","flip","behavior","selectOptions","index","option","forEach","background-color","inputId","id","$formGroup","$label","attr","on","target","change","console","log","alert","nodeName","parentElement","which","keyCode","selectionStart","selectionEnd","startPosition","array","itemToDelete","is","focusin","focusout","mousedown","document","mouseup","contains","jQueryInterface","test","methodName","charAt","toUpperCase","slice","Constructor","noConflict"],"mappings":"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","sourcesContent":["import $ from 'jquery'\nimport Popper from 'popper.js'\n\n// TODO: try to find convinient way to declare private members. Is it convinient enough to move them into IIFE?\nconst BsMultiSelect = ((window, $, Popper) => {\n    const JQUERY_NO_CONFLICT = $.fn[pluginName];\n    const pluginName = 'dashboardCodeBsMultiSelect';\n    const dataKey = `plugin_${pluginName}`;\n\n    const defFilterInputItemStyleSys = {'display': 'block'};\n    const defSelectedPanelClass = 'form-control btn border';\n    const defFilterInputStyle = {'width': '2ch', 'border': '0', 'padding': '0', 'outline': 'none'};\n    const defSelectedPanelStyle = {'cursor': 'text', 'display': 'flex', \"flex-wrap\": \"wrap\", \"align-items\": \"center\", \"margin-bottom\": \"0px\"};\n    const defSelectedItemClass = 'badge';\n    const defSelectedItemStyle = {'padding-left': '0px', 'display': 'flex', 'align-items': 'center'};\n    const defRemoveSelectedItemButtonClass = 'close';\n    const defRemoveSelectedItemButtonStyle = {'font-size': '100%'};\n    const defaults = {\n        items: [],\n        defaults: [],\n        //usePopper: true,\n        selectedPanelMinHeight: 'calc(2.25rem + 2px)',\n        selectedPanelReadonlyBackgroundColor: '#e9ecef',\n        selectedPanelValidBoxShadow: ' 0 0 0 0.2rem rgba(40, 167, 69, 0.25)',\n        selectedPanelInvalidBoxShadow: '0 0 0 0.2rem rgba(220, 53, 69, 0.25)',\n        filterInputColor: '#495057',\n        containerClass: 'dashboardcode-bsmultiselect',\n        dropDownMenuClass: 'dropdown-menu',\n        dropDownItemClass: 'px-2',\n        selectedPanelClass: '',\n        selectedPanelReadonlyClass: '',\n        selectedItemClass: '', \n        removeSelectedItemButtonClass: '',\n        filterInputItemClass: '', \n        filterInputClass: ''\n    };\n\n    class Plugin {\n        constructor(element, options) {\n            if (typeof Popper === 'undefined') {\n                throw new TypeError('DashboardCode bsMultiSelect require Popper.js (https://popper.js.org)')\n            }\n\n            // readonly\n            this.element = element;\n            this.options = $.extend({}, defaults, options);\n            this.input = element;\n            this.container = null;\n            this.dropDownMenu = null;\n            this.selectedPanel = null;\n            this.filterInput = null;\n            this.filterInputItem = null;\n            this.popper = null;\n\n            // state\n            this.skipFocusout = false;\n            this.stopChangePropogation = false;\n            this.backspaceAtStartPoint = null;\n            this.selectedDropDownItem = null;\n            this.selectedDropDownIndex = null;\n            this.hasItems = false;\n\n            this.init();\n        }\n\n        updateDropDownPosition() {\n            //console.log('updateDropDownPosition');\n            //if (this.options.usePopper) {\n                this.popper.update();\n            // } else {\n            //     $(this.dropDownMenu).dropdown('update');\n            // }\n        }\n\n        hideDropDown() {\n            //if (this.options.usePopper) {\n                //console.log('popper remove show');\n                $(this.dropDownMenu).removeClass('show')\n            // } else {\n            //     if ($(this.dropDownMenu).hasClass('show'))\n            //         $(this.dropDownMenu).dropdown('toggle');\n            // }\n        }\n\n        showDropDown() {\n                //if (this.options.usePopper) {\n                    //console.log('popper add show');\n                    $(this.dropDownMenu).addClass('show')\n                // } else {\n                //     if (!$(this.dropDownMenu).hasClass('show'))\n                //         $(this.dropDownMenu).dropdown('toggle');\n                // }\n        }\n\n        setCheck(optionId, isChecked) {\n            this.stopChangePropogation=false;\n            for (let i = 0; i < this.input.options.length; i += 1) {\n                let option = this.input.options[i];\n                if (option.value == optionId) {\n                    this.input.options[i].selected = isChecked;\n                    break;\n                }\n            }\n            this.stopChangePropogation=false;\n        }\n\n        // Public methods\n        getInputValue() {\n            return $(this.input).val();\n        }\n\n        closeDropDown() {\n            this.resetSelectDropDownMenu();\n            this.clearFilterInput();\n            this.hideDropDown();\n            this.updateDropDownPosition();\n        }\n\n        clearFilterInput() {\n            if (this.filterInput.value != '') {\n                this.filterInput.value = '';\n                this.filterDropDownMenu();\n                if (this.hasItems) {\n                    this.updateDropDownPosition(); \n                } \n            }\n        }\n\n        filterDropDownMenu() {\n            let text = this.filterInput.value.trim();\n            let visible = 0;\n            $(this.dropDownMenu).find('li').each((i, item) => {\n                let $item = $(item);\n                if (text == '') {\n                    $item.show();\n                    visible++;\n                }\n                else {\n                    let itemText = $item.text();\n                    let $checkbox = $item.find('input[type=\"checkbox\"]');\n                    \n                    if (!$checkbox.prop('checked') && itemText.toLowerCase().indexOf(text.toLowerCase())>=0) {\n                        $item.show();\n                        visible++;\n                    } else {\n                        $item.hide();\n                    }\n                }\n            });\n            this.hasItems = visible > 0;\n            this.resetSelectDropDownMenu();\n        }\n\n        clickDropDownItem(event) {\n            event.preventDefault();\n            event.stopPropagation();\n\n            let $menuItem = $(event.currentTarget).closest(\"LI\");\n            let optionId  = $menuItem.data(\"option-id\");\n            let $checkBox = $menuItem.find('input[type=\"checkbox\"]');\n            if ($checkBox.prop('checked')) {\n                let $selectedItem = $(this.selectedPanel).find(`li[data-option-id=\"${optionId}\"]`);\n                this.removeSelectedItem($selectedItem, optionId, $checkBox);\n            } else {\n                let itemText = $menuItem.find('label').text();\n                this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n                $checkBox.prop('checked', true);\n            }\n            this.clearFilterInput();\n            this.filterInput.focus();\n        }\n        \n        appendDropDownItem(itemValue, itemText, isChecked) {\n            let optionId = itemValue;\n            let checkBoxId = `dashboardcode-bsmultiselect-${this.input.name.toLowerCase()}-generated-id-${optionId.toLowerCase()}`;\n            let checked = isChecked ? \"checked\" : \"\";\n            let $dropDownItem = $(\n                `<li data-option-id=\"${optionId}\">\n                    <div class=\"custom-control custom-checkbox\">\n                        <input type=\"checkbox\" class=\"custom-control-input\" id=\"${checkBoxId}\" ${checked}>\n                        <label class=\"custom-control-label\" for=\"${checkBoxId}\">${itemText}</label>\n                    </div>\n                 </li>`).addClass(this.options.dropDownItemClass).appendTo($(this.dropDownMenu));\n            \n            let $checkBox = $dropDownItem.find(`input[type=\"checkbox\"]`);\n            if (isChecked) {\n                this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n            }\n        }\n        \n        createAndAppendSelectedItem($checkBox, optionId, itemText) {\n            let $selectedItem = $(`<li data-option-id=\"${optionId}\"><span>${itemText}</span></li>`);\n            if (!this.options.selectedItemClass){\n                $selectedItem.addClass(defSelectedItemClass);\n                $selectedItem.css(defSelectedItemStyle)\n            }else{\n                $selectedItem.addClass(this.options.selectedItemClass);\n            }\n                \n            $selectedItem.insertBefore($(this.filterInputItem));\n            let $buttom = $(\"<button aria-label='Close' tabIndex='-1' type='button'><span aria-hidden='true'>&times;</span></button>\");\n            if (!this.options.removeSelectedItemButtonClass){\n                $buttom.addClass(defRemoveSelectedItemButtonClass);\n                $buttom.css(defRemoveSelectedItemButtonStyle);\n            }\n            else{\n                $buttom.addClass(this.options.removeSelectedItemButtonClass)\n            }\n            \n            $buttom.appendTo($selectedItem); \n            this.setCheck(optionId, true);\n\n            $buttom.click(() => {\n                this.removeSelectedItem($selectedItem, optionId, $checkBox)\n                this.updateDropDownPosition();\n                $(this.filterInput).focus();\n            });\n        }\n\n        adoptFilterInputLength() {\n            this.filterInput.style.width = this.filterInput.value.length*1.3 + 2 + \"ch\";\n        }\n\n        analyzeInputText() {\n            let text = this.filterInput.value.trim().toLowerCase();\n            let nodeList = this.dropDownMenu.querySelectorAll(\"LI\");\n            let item = null;\n            for (let i = 0; i < nodeList.length; ++i) {\n                let it = nodeList[i];\n                if (it.textContent.trim().toLowerCase() == text)\n                {\n                    item=it;\n                    break;\n                }\n            }\n            if (item) {\n                let $item = $(item);\n                let $checkBox = $item.find('input[type=\"checkbox\"]');\n                if (!$checkBox.prop('checked')) {\n                    let optionId = $item.data('option-id');\n                    let itemText = $item.find('label').text();\n                    this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n                    $checkBox.prop('checked', true);\n                }\n                this.clearFilterInput();\n            }\n        }\n\n        resetSelectDropDownMenu() {\n            if (this.selectedDropDownItem !== null) {\n                this.selectedDropDownItem.classList.remove('bg-light');\n                this.selectedDropDownItem.classList.remove('text-primary');\n                this.selectedDropDownItem = null;\n            }\n            this.selectedDropDownIndex = null;\n        }\n        \n        keydownArrow(down) {\n            let visibleNodeListArray = $(this.dropDownMenu).find('LI:not([style*=\"display: none\"])').toArray();\n            if (visibleNodeListArray.length > 0) {\n                if (this.hasItems) {\n                    this.showDropDown();\n                }\n                if (this.selectedDropDownItem === null) {\n                    this.selectedDropDownIndex = down ? 0 : visibleNodeListArray.length - 1;\n                }\n                else {\n                    // IE10-11 doesn't support multiple arguments in classList remove \n                    this.selectedDropDownItem.classList.remove('bg-light');\n                    this.selectedDropDownItem.classList.remove('text-primary');\n                    if (down) {\n                        let newIndex = this.selectedDropDownIndex + 1;\n                        this.selectedDropDownIndex = newIndex < visibleNodeListArray.length ? newIndex : 0;\n                    } else {\n                        let newIndex = this.selectedDropDownIndex - 1;\n                        this.selectedDropDownIndex = newIndex >= 0 ? newIndex : visibleNodeListArray.length - 1;\n                    }\n                }\n                this.selectedDropDownItem = visibleNodeListArray[this.selectedDropDownIndex];\n                // IE10-11 doesn't support multiple arguments in classList add \n                this.selectedDropDownItem.classList.add('text-primary');\n                this.selectedDropDownItem.classList.add('bg-light');\n            }\n        }\n\n        removeSelectedItem($selectedItem, optionId, $checkBox) {\n            $selectedItem.remove();\n            this.setCheck(optionId, false);\n            $checkBox.prop('checked', false);\n        }\n\n        init() {\n            let $input = $(this.input);\n            $input.hide();\n            let disabled = this.input.disabled;\n\n            let $container = $(\"<div/>\");\n            if (!this.options.containerClass)\n                $container.addClass(this.options.containerClass);\n            $container.insertAfter($input);\n                \n            this.container = $container.get(0);\n\n            let $selectedPanel = $(\"<ul/>\");\n\n            if (!this.options.selectedPanelClass){\n                $selectedPanel.addClass(defSelectedPanelClass);\n                $selectedPanel.css(defSelectedPanelStyle);\n                $selectedPanel.css(\"min-height\", this.options.selectedPanelMinHeight);\n            }\n            else\n                $selectedPanel.addClass(this.options.selectedPanelClass);\n            $selectedPanel.appendTo(this.container);\n            this.selectedPanel = $selectedPanel.get(0);\n\n            if ($input.hasClass(\"is-valid\")){\n                $selectedPanel.removeClass(\"border\");\n                $selectedPanel.addClass(\"is-valid\");\n                //$selectedPanel.removeClass(\"btn-outline-danger\");\n                //$selectedPanel.addClass(\"btn-outline-success\");\n            }\n            \n            if ($input.hasClass(\"is-invalid\")){\n                $selectedPanel.removeClass(\"border\");\n                $selectedPanel.addClass(\"is-invalid\");\n                //$selectedPanel.removeClass(\"btn-outline-success\");\n                //$selectedPanel.addClass(\"btn-outline-danger\");\n            }\n\n            let $filterInputItem = $('<li/>');\n            this.filterInputItem = $filterInputItem.get(0)\n            if (!this.options.filterInputItemClass)\n                $filterInputItem.css(defFilterInputItemStyleSys)\n            else\n                $filterInputItem.addClass(this.options.filterInputItemClass)\n            \n            $filterInputItem.appendTo(this.selectedPanel);\n            \n\n            let $filterInput = $('<input type=\"search\" autocomplete=\"off\">');\n            if (!this.options.filterInputClass){\n                $filterInput.css(defFilterInputStyle);\n                $filterInput.css(\"color\", this.options.filterInputColor);\n            } else {\n                $filterInput.addClass(this.options.filterInputClass);\n            }\n            $filterInput.appendTo(this.filterInputItem);\n            this.filterInput = $filterInput.get(0);\n\n            let $dropDownMenu = $(\"<ul/>\").appendTo($container);\n            this.dropDownMenu = $dropDownMenu.get(0);\n\n            $dropDownMenu.addClass(this.options.dropDownMenuClass);\n            //if (this.options.usePopper) {\n                this.popper = new Popper(this.filterInput, this.dropDownMenu, {\n                    placement: 'bottom-start',\n                    modifiers: {\n                        flip: {\n                            behavior: ['left', 'right']\n                        }\n                    }\n                });\n            // } else {\n            //     $(this.dropDownMenu).addClass(\"dropdown dropdown-menu\")\n            //     $(this.dropDownMenu).data(\"\", \"\");\n            //     $(this.dropDownMenu).dropdown({\n            //         placement: 'bottom-start',\n            //         flip: false,\n            //         reference: this.filterInput\n            //     });\n            // }\n\n            if (!this.options.items) {\n                this.options.items.forEach((item) => {\n                    let itemValue = item.value;\n                    let itemText = item.text;\n                    let isChecked = item.isChecked;\n                    this.appendDropDownItem(itemValue, itemText, isChecked);\n                });\n                this.hasItems = this.options.items.length > 0;\n            } else {\n                let selectOptions = $input.find('option');\n                selectOptions.each(\n                    (index, option) => {\n                        let itemValue = option.value;\n                        let itemText = option.text;\n                        let isChecked = option.selected;\n                        this.appendDropDownItem(itemValue, itemText, isChecked);\n                    }\n                );\n                this.hasItems = selectOptions.length > 0;\n            }\n            if (disabled) {\n                this.filterInput.style.display = \"none\";\n                if(!this.options.selectedPanelReadonlyClass){\n                    $selectedPanel.css({\"background-color\": this.options.selectedPanelReadonlyBackgroundColor});\n                }else{\n                    $selectedPanel.addClass(this.options.selectedPanelReadonlyClass);\n                }\n                $selectedPanel.find('button').prop(\"disabled\", true);\n                $selectedPanel.addClass();\n            } else {\n                let inputId = this.input.id;\n                let $formGroup = $input.closest(\".form-group\");\n                if ($formGroup.length == 1) {\n                    let $label = $formGroup.find(`label[for=\"${inputId}\"]`);\n                    let f = $label.attr(\"for\");\n                    if (f == this.input.id) {\n                        this.filterInput.id = \"dashboardcode-bsmultiselect-generated-filter-id-\" + this.input.id;\n                        $label.attr(\"for\", this.filterInput.id);\n                    }\n                }\n\n                this.updateDropDownPosition();\n\n                $dropDownMenu.click((event) => {\n                    event.stopPropagation();\n                });\n\n                $dropDownMenu.find('li').click(event => {\n                    this.clickDropDownItem(event);\n                });\n\n                $dropDownMenu.on(\"mouseover\", () => {\n                    this.resetSelectDropDownMenu();\n                });\n\n                $dropDownMenu.find(\"li\").on(\"mouseover\", event => {\n                    $(event.target).closest(\"li\").addClass('text-primary').addClass('bg-light')\n                });\n\n                $dropDownMenu.find(\"li\").on(\"mouseout\", event => {\n                    $(event.target).closest(\"li\").removeClass('text-primary').removeClass('bg-light')\n                });\n\n                $input.change(() => {\n                    window.console.log(\"$input.change\");\n                    if (!this.stopChangePropogation)\n                        window.alert('change');\n                }\n\n                ); \n                $selectedPanel.click((event) => {\n                    //console.log('selectedPanel click ' + event.target.nodeName);\n                    if (event.target.nodeName != \"INPUT\")\n                        $(this.filterInput).val('').focus();\n                    if (!(event.target.nodeName == \"BUTTON\" || (event.target.nodeName == \"SPAN\" && event.target.parentElement.nodeName == \"BUTTON\")) && this.hasItems)\n                        this.showDropDown();\n                });\n\n\n                $filterInput.on(\"keydown\", (event) => {\n                    if (event.which == 38 || event.keyCode == 38) {\n                        event.preventDefault();\n                        this.keydownArrow(false);\n                    }\n                    else if (event.which == 40 || event.keyCode == 40) {\n                        event.preventDefault()\n                        this.keydownArrow(true);\n                    }\n                    else if (event.which == 13 || event.keyCode == 13) {\n                        event.preventDefault();\n                    }\n                    else if (event.which == 9 || event.keyCode == 9){\n                        if (this.filterInput.value){\n                            event.preventDefault();\n                        }\n                        else{\n                            this.closeDropDown();\n                        }\n                    }\n                    else {\n                        if (event.which == 8 || event.keyCode == 8) {\n                            // detect that backspace is at start of input field (this will be used at keydown)\n                            this.backspaceAtStartPoint = (this.filterInput.selectionStart == 0 && this.filterInput.selectionEnd == 0);\n                        }\n                        this.resetSelectDropDownMenu();\n                    }\n                });\n\n                $filterInput.on(\"keyup\", (event) => {\n                    if (event.which == 13 || event.keyCode == 13 || event.which == 9 || event.keyCode == 9) {\n                        if (this.selectedDropDownItem) {\n                            let $item = $(this.selectedDropDownItem);\n                            let $checkBox = $item.find('input[type=\"checkbox\"]');\n                            let optionId = $item.data('option-id');\n                            if (!$checkBox.prop('checked')) {\n                                let itemText = $item.find('label').text();\n                                this.createAndAppendSelectedItem($checkBox, optionId, itemText);\n                                $checkBox.prop('checked', true);\n                                this.filterInput.value = \"\";\n                            } else {\n                                let $selectedItem = $(this.selectedPanel).find(`LI[data-option-id=\"${optionId}\"]:first`);\n                                this.removeSelectedItem($selectedItem, optionId, $checkBox);\n                            }\n                            //this.resetSelectDropDownMenu();\n                        } else {\n                            this.analyzeInputText();\n                        }\n                        if (event.which == 9 || event.keyCode == 9){\n                            this.closeDropDown();\n                        }\n                    } else if (event.which == 8 || event.keyCode == 8) {\n                        let startPosition = this.filterInput.selectionStart;\n                        let endPosition = this.filterInput.selectionEnd;\n                        if (endPosition == 0 && startPosition == 0 && this.backspaceAtStartPoint) {\n                            let $selectedPanel = $(this.selectedPanel);\n                            let array = $selectedPanel.find(\"LI\").toArray();\n                            if (array.length >= 2) {\n                                let itemToDelete = array[array.length - 2];\n                                let $itemToDelete = $(itemToDelete);\n                                let optionId = $itemToDelete.data(\"option-id\");\n                                let $item = $dropDownMenu.find(`LI[data-option-id=\"${optionId}\"]:first`);\n                                let $checkBox = $item.find('input[type=\"checkbox\"]:first');\n                                let $selectedItem = $selectedPanel.find(`LI[data-option-id=\"${optionId}\"]:first`);\n                                this.removeSelectedItem($selectedItem, optionId, $checkBox);\n                            }\n                        }\n                        this.backspaceAtStartPoint = null;\n                        if ($dropDownMenu.is(':hidden'))\n                            this.updateDropDownPosition();\n                    } else if (event.which == 27 || event.keyCode == 27) { // escape\n                        this.closeDropDown();\n                    }\n                });\n\n                // Set on change for filter input\n                $filterInput.on('input', () => { // keyup focus\n                    //console.log('filterInput input');\n                    this.adoptFilterInputLength();\n                    this.filterDropDownMenu();\n                    if (this.hasItems) {\n                        this.updateDropDownPosition(); // support case when textbox can change its place because of line break (texbox grow with each key press)\n                        this.showDropDown();\n                    } else {\n                        this.hideDropDown();\n                    }\n                });\n\n                $filterInput.focusin(() => {\n                    if($selectedPanel.hasClass(\"is-valid\") &&  this.options.selectedPanelValidBoxShadow ){\n                        $selectedPanel.css(\"box-shadow\", this.options.selectedPanelValidBoxShadow );              \n                    }else if ($selectedPanel.hasClass(\"is-invalid\") && this.options.selectedPanelInvalidBoxShadow){\n                        $selectedPanel.css(\"box-shadow\", this.options.selectedPanelInvalidBoxShadow );\n                    }\n                    $(this.selectedPanel).addClass(\"focus\");\n                });\n\n                $filterInput.focusout(() => {\n                    if (!this.skipFocusout)\n                    {\n                        $selectedPanel.css(\"box-shadow\", \"\" );                \n                        $(this.selectedPanel).removeClass(\"focus\");\n                    }\n                });\n\n                $container.mousedown(() => {\n                    this.skipFocusout = true;\n\n                });\n\n                $(window.document).mouseup((event) => {\n                    this.skipFocusout = false;\n                    if (!(this.container === event.target || $.contains(this.container, event.target))) {\n                        //console.log(\"document mouseup outside container\");\n                        this.closeDropDown();\n                    }\n                });\n            }\n        }\n    }\n\n    function jQueryInterface(options) {\n        return this.each(function () {\n            let data = $(this).data(dataKey)\n\n            if (!data) {\n                if (/dispose|hide/.test(options)) {\n                    return;\n                }\n                const optionsObject = (typeof options === 'object')?options:null;\n                data = new Plugin(this, optionsObject);\n                $(this).data(dataKey, data);\n            }\n\n            if (typeof options === 'string') {\n                let methodName = options;\n                if (typeof data[methodName] === 'undefined') {\n                    throw new TypeError(`No method named \"${methodName}\"`)\n                }\n                data[methodName]()\n            }\n        })\n    }\n\n    $.fn[pluginName] = jQueryInterface;\n\n    // in case of mulitple $(this) it will return 1st element plugin instance\n    $.fn[pluginName.charAt(0).toUpperCase() + pluginName.slice(1)] = function () {\n        return $(this).data(\"plugin_\" + pluginName);\n    };\n\n    $.fn[pluginName].Constructor = Plugin;\n\n    $.fn[pluginName].noConflict = function () {\n        $.fn[pluginName] = JQUERY_NO_CONFLICT\n        return jQueryInterface;\n    }\n    return Plugin;\n})(window, $, Popper);\n\nexport default BsMultiSelect;\n"]}