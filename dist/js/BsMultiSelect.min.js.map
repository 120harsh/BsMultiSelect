{"version":3,"sources":["../../js/src/Bootstrap4Adapter.es8.js","../../js/src/BsMultiSelect.es8.js"],"names":["Bootstrap4Adapter","jQuery","options","hiddenSelect","this","CreateSelectedItemContent","$selectedItem","itemText","removeSelectedItem","selectedItemClass","addClass","css","padding-left","line-height","$text","$buttom","removeSelectedItemButtonClass","font-size","click","appendTo","CreateDropDownItemContent","$dropDownItem","optionId","isSelected","checkBoxId","containerClass","name","toLowerCase","checked","dropDownItemClass","$checkBox","find","prop","Init","$selectedPanel","$hiddenSelect","hasClass","Enable","isEnabled","inputId","id","$formGroup","closest","length","$label","f","attr","$filterInput","selectedPanelReadonlyClass","background-color","selectedPanelReadonlyBackgroundColor","Hover","$li","removeClass","FilterClick","event","target","nodeName","parentElement","Focus","isFocused","selectedPanelFocusClass","selectedPanelValidBoxShadow","selectedPanelInvalidBoxShadow","selectedPanelBoxShadow","selectedPanelBorderColor","window","$","Popper","JQUERY_NO_CONFLICT","fn","pluginName","dataKey","defSelectedPanelStyle","margin-bottom","defSelectedPanelStyleSys","display","flex-wrap","defFilterInputItemStyleSys","list-style-type","defFilterInputStyleSys","width","border","padding","outline","defDropDownMenuStyleSys","defaults","doManageFocus","selectedPanelDefMinHeight","filterInputColor","dropDownMenuClass","selectedPanelClass","filterInputItemClass","filterInputClass","Plugin","element","TypeError","extend","adapter","container","dropDownMenu","selectedPanel","filterInput","filterInputItem","popper","filterInputItemOffsetLeft","skipFocusout","backspaceAtStartPoint","selectedDropDownItem","selectedDropDownIndex","hasItems","init","_proto","prototype","updateDropDownPosition","force","offsetLeft","update","hideDropDown","hide","showDropDown","show","setHiddenSelectOptionSelected","isChecked","i","value","selected","getInputValue","val","closeDropDown","resetSelectDropDownMenu","clearFilterInput","updatePosition","adoptFilterInputLength","filterDropDownMenu","text","trim","visible","each","dropDownMenuItem","$dropDownMenuItem","data","indexOf","clickDropDownItem","preventDefault","stopPropagation","currentTarget","toggleItem","focus","appendDropDownItem","optionElement","_this","adoptDropDownItem","appendItem","removeItem","remove","insertBefore","style","analyzeInputText","dropDownItems","querySelectorAll","dropDownItem","it","textContent","toggle","keydownArrow","down","visibleNodeListArray","toArray","newIndex","_this2","disabled","$container","insertAfter","get","min-height","selectedPanelMinHeight","$filterInputItem","$dropDownMenu","placement","modifiers","preventOverflow","enabled","flip","document","ready","selectOptions","index","on","which","selectionStart","selectionEnd","$penult","prev","focusin","focusout","mousedown","mouseup","contains","jQueryInterface","test","methodName","charAt","toUpperCase","slice","Constructor","noConflict"],"mappings":"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","sourcesContent":["class Bootstrap4Adapter {\r\n\r\n    constructor(jQuery, options, hiddenSelect) {\r\n        this.jQuery=jQuery;\r\n        this.options=options;\r\n        this.hiddenSelect=hiddenSelect;\r\n    }\r\n\r\n    CreateSelectedItemContent($selectedItem, itemText, removeSelectedItem){\r\n        const defSelectedItemClass = 'badge';\r\n        const defSelectedItemStyle = {'padding-left': '0px', 'line-height': '1rem'};\r\n        const defRemoveSelectedItemButtonClass = 'close';\r\n        const defRemoveSelectedItemButtonStyle = {'line-height': '1rem', 'font-size':'1.3rem'};\r\n\r\n        if (!this.options.selectedItemClass){\r\n            $selectedItem.addClass(defSelectedItemClass);\r\n            $selectedItem.css(defSelectedItemStyle)\r\n        }else{\r\n            $selectedItem.addClass(this.options.selectedItemClass);\r\n        }\r\n            \r\n        let $text = this.jQuery(`<span>${itemText}</span>`)\r\n        let $buttom = this.jQuery('<button aria-label=\"Close\" tabIndex=\"-1\" type=\"button\"><span aria-hidden=\"true\">&times;</span></button>');\r\n\r\n        if (!this.options.removeSelectedItemButtonClass){\r\n            $buttom.addClass(defRemoveSelectedItemButtonClass);\r\n            $buttom.css(defRemoveSelectedItemButtonStyle);\r\n        }\r\n        else{\r\n            $buttom.addClass(this.options.removeSelectedItemButtonClass)\r\n        }\r\n        $buttom.click(() => {\r\n            removeSelectedItem();\r\n        });\r\n\r\n        $text.appendTo($selectedItem);\r\n        $buttom.appendTo($selectedItem); \r\n    }\r\n\r\n    CreateDropDownItemContent($dropDownItem, optionId, itemText, isSelected){\r\n        let checkBoxId = `${this.options.containerClass}-${this.hiddenSelect.name.toLowerCase()}-generated-id-${optionId.toLowerCase()}`;\r\n        let checked = isSelected ? \"checked\" : \"\";\r\n\r\n        let $dropDownItemContent= this.jQuery(`<div class=\"custom-control custom-checkbox\">\r\n                <input type=\"checkbox\" class=\"custom-control-input\" id=\"${checkBoxId}\" ${checked}>\r\n                <label class=\"custom-control-label\" for=\"${checkBoxId}\">${itemText}</label>\r\n        </div>`)\r\n        $dropDownItemContent.appendTo($dropDownItem);\r\n        $dropDownItem.addClass(this.options.dropDownItemClass)\r\n        let $checkBox = $dropDownItem.find(`INPUT[type=\"checkbox\"]`);\r\n        let adoptDropDownItem = (isSelected) => {\r\n            $checkBox.prop('checked', isSelected);\r\n        }\r\n        return adoptDropDownItem;\r\n    }\r\n\r\n    Init($selectedPanel){\r\n        let $hiddenSelect = this.jQuery(this.hiddenSelect);\r\n        if ($hiddenSelect.hasClass(\"is-valid\")){\r\n            $selectedPanel.addClass(\"is-valid\");\r\n        }\r\n        \r\n        if ($hiddenSelect.hasClass(\"is-invalid\")){\r\n            $selectedPanel.addClass(\"is-invalid\");\r\n        }\r\n    }\r\n\r\n    Enable($selectedPanel, isEnabled){\r\n        if(isEnabled){\r\n            let inputId = this.hiddenSelect.id;\r\n            let $formGroup = this.jQuery(this.hiddenSelect).closest('.form-group');\r\n            \r\n            if ($formGroup.length == 1) {\r\n                let $label = $formGroup.find(`label[for=\"${inputId}\"]`);\r\n                let f = $label.attr('for');\r\n                let $filterInput = $selectedPanel.find('input');\r\n                if (f == this.hiddenSelect.id) {\r\n                    let id = `${this.options.containerClass}-generated-filter-id-${this.hiddenSelect.id}`;\r\n                    $filterInput.attr('id', id);\r\n                    $label.attr('for', id);\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            if(!this.options.selectedPanelReadonlyClass){\r\n                $selectedPanel.css({\"background-color\": this.options.selectedPanelReadonlyBackgroundColor});\r\n            }else{\r\n                $selectedPanel.addClass(this.options.selectedPanelReadonlyClass);\r\n            }\r\n            $selectedPanel.find('BUTTON').prop(\"disabled\", true);\r\n        }\r\n    }\r\n    Hover($li, isEnabled){\r\n        if (isEnabled)\r\n            $li.addClass('text-primary').addClass('bg-light');\r\n        else\r\n            $li.removeClass('text-primary').removeClass('bg-light');\r\n    }\r\n\r\n    FilterClick(event){\r\n        return !(event.target.nodeName == \"BUTTON\" || (event.target.nodeName == \"SPAN\" && event.target.parentElement.nodeName == \"BUTTON\"))\r\n    }\r\n\r\n    Focus($selectedPanel, isFocused){\r\n        if (isFocused){\r\n            if (this.options.selectedPanelFocusClass){\r\n                $selectedPanel.addClass(\"this.options.selectedPanelFocusClass\");\r\n            }\r\n            else\r\n            {\r\n                if ($selectedPanel.hasClass(\"is-valid\") &&  this.options.selectedPanelValidBoxShadow){\r\n                    $selectedPanel.css(\"box-shadow\", this.options.selectedPanelValidBoxShadow);              \r\n                } else if ($selectedPanel.hasClass(\"is-invalid\") && this.options.selectedPanelInvalidBoxShadow){\r\n                    $selectedPanel.css(\"box-shadow\", this.options.selectedPanelInvalidBoxShadow);\r\n                } else {\r\n                    $selectedPanel\r\n                        .css(\"box-shadow\", this.options.selectedPanelBoxShadow)\r\n                        .css(\"border-color\", this.options.selectedPanelBorderColor);\r\n                }\r\n            }\r\n\r\n        }else{\r\n            if (this.options.selectedPanelFocusClass){\r\n                $selectedPanel.removeClass(this.options.selectedPanelFocusClass);\r\n            } else {\r\n                $selectedPanel.css(\"box-shadow\", \"\" ).css(\"border-color\", \"\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport default Bootstrap4Adapter;","import $ from 'jquery'\nimport Popper from 'popper.js'\nimport Bootstrap4Adapter from './Bootstrap4Adapter.es8'\n\n// TODO: try to find convinient way to declare private members. Is it convinient enough to move them into IIFE?\nconst BsMultiSelect = ((window, $, Popper) => {\n    const JQUERY_NO_CONFLICT = $.fn[pluginName];\n    const pluginName = 'dashboardCodeBsMultiSelect';\n    const dataKey = `plugin_${pluginName}`;\n\n    const defSelectedPanelClass = 'form-control';\n    const defSelectedPanelStyle = {'margin-bottom': '0'}; // 16 is for bootstrap reboot for UL\n    const defSelectedPanelStyleSys = {'display': 'flex', \"flex-wrap\": \"wrap\"};\n\n    const defFilterInputItemStyleSys = {'list-style-type':'none'}; \n    const defFilterInputStyleSys = {'width': '2ch', 'border': '0', 'padding': '0', 'outline': 'none'};\n    \n    const defDropDownMenuStyleSys =  {'list-style-type':'none'}; // ul usualy has bullets\n    const defaults = {\n        doManageFocus:true,\n        //usePopper: true,\n        selectedPanelDefMinHeight: 'calc(2.25rem + 2px)',\n        selectedPanelReadonlyBackgroundColor: '#e9ecef',\n        selectedPanelBoxShadow: '0 0 0 0.2rem rgba(0, 123, 255, 0.25)',\n        selectedPanelBorderColor: '#80bdff',\n        selectedPanelValidBoxShadow: ' 0 0 0 0.2rem rgba(40, 167, 69, 0.25)',\n        selectedPanelInvalidBoxShadow: '0 0 0 0.2rem rgba(220, 53, 69, 0.25)',\n        filterInputColor: '#495057',\n        containerClass: 'dashboardcode-bsmultiselect',\n        dropDownMenuClass: 'dropdown-menu',\n        dropDownItemClass: 'px-2',\n        selectedPanelClass: '',\n        selectedPanelFocusClass : '',\n        selectedPanelReadonlyClass: '',\n        selectedItemClass: '', \n        removeSelectedItemButtonClass: '',\n        filterInputItemClass: '', \n        filterInputClass: ''\n    };\n\n    class Plugin {\n        constructor(element, options) {\n            if (typeof Popper === 'undefined') {\n                throw new TypeError('DashboardCode BsMultiSelect require Popper.js (https://popper.js.org)')\n            }\n\n            // readonly\n            this.hiddenSelect = element;\n            this.options = $.extend({}, defaults, options);\n            this.jQuery = $;\n            this.adapter = new Bootstrap4Adapter($, this.options, this.hiddenSelect);\n            \n            this.container = null;\n            this.dropDownMenu = null;\n            this.selectedPanel = null;\n            this.filterInput = null;\n            this.filterInputItem = null;\n            this.popper = null;\n\n            // state\n            this.filterInputItemOffsetLeft = null;\n            this.skipFocusout = false;\n            this.backspaceAtStartPoint = null;\n            this.selectedDropDownItem = null;\n            this.selectedDropDownIndex = null;\n            this.hasItems = false;\n\n            this.init();\n        }\n\n        updateDropDownPosition(force) {\n            let offsetLeft = this.filterInputItem.offsetLeft;\n            if (force || this.filterInputItemOffsetLeft!=offsetLeft){\n                this.popper.update();\n                this.filterInputItemOffsetLeft=offsetLeft;\n            }\n        }\n\n        hideDropDown() {\n            $(this.dropDownMenu).hide()\n        }\n\n        showDropDown() {\n            this.updateDropDownPosition(true);\n            $(this.dropDownMenu).show()\n        }\n\n        setHiddenSelectOptionSelected(optionId, isChecked) {\n            for (let i = 0; i < this.hiddenSelect.options.length; i += 1) {\n                let option = this.hiddenSelect.options[i];\n                if (option.value == optionId) {\n                    this.hiddenSelect.options[i].selected = isChecked;\n                    break;\n                }\n            }\n        }\n\n        // Public methods\n        getInputValue() {\n            return $(this.hiddenSelect).val();\n        }\n\n        closeDropDown() {\n            this.resetSelectDropDownMenu();\n            this.clearFilterInput();\n            this.hideDropDown();\n            this.updateDropDownPosition();\n        }\n\n        clearFilterInput(updatePosition) {\n            if (this.filterInput.value != '') {\n                this.filterInput.value = '';\n                this.adoptFilterInputLength();\n                this.filterDropDownMenu();\n                if (updatePosition && this.hasItems) {\n                    this.updateDropDownPosition(false); \n                } \n            }\n        }\n\n        filterDropDownMenu() {\n            let text = this.filterInput.value.trim().toLowerCase();\n            let visible = 0;\n            $(this.dropDownMenu).find('LI').each((i, dropDownMenuItem) => {\n                let $dropDownMenuItem = $(dropDownMenuItem);\n                if (text == '') {\n                    $dropDownMenuItem.show();\n                    visible++;\n                }\n                else {\n                    let itemText = $dropDownMenuItem.data(\"option-text\");\n                    let isSelected = $dropDownMenuItem.data(\"option-selected\"); \n                    if (!isSelected && itemText.indexOf(text)>=0) {\n                        $dropDownMenuItem.show();\n                        visible++;\n                    } else {\n                        $dropDownMenuItem.hide();\n                    }\n                }\n            });\n            this.hasItems = visible > 0;\n            this.resetSelectDropDownMenu();\n        }\n\n        clickDropDownItem(event) {\n            event.preventDefault();\n            event.stopPropagation();\n            let toggleItem = $(event.currentTarget).closest(\"LI\").data(\"option-toggle\");\n            toggleItem();\n            this.clearFilterInput(false); \n            this.filterInput.focus(); \n        }\n        \n        appendDropDownItem(optionElement) {\n            let optionId = optionElement.value;\n            let itemText = optionElement.text;\n            let isSelected = optionElement.selected;\n            let $dropDownItem = $(\"<li/>\");\n            $dropDownItem.data(\"option-id\", optionId);\n            $dropDownItem.data(\"option-text\", itemText.toLowerCase());\n\n            let adoptDropDownItem = this.adapter.CreateDropDownItemContent($dropDownItem, optionId, itemText, isSelected)\n            $dropDownItem.appendTo($(this.dropDownMenu));\n\n            let appendItem = () => {\n                $dropDownItem.data(\"option-selected\", true);\n                let $selectedItem = $(\"<li/>\");\n                $selectedItem.data(\"option-id\", optionId);\n                optionElement.selected = true;\n                adoptDropDownItem(true);\n\n                let removeItem = () => {\n                    $dropDownItem.data(\"option-selected\", false);\n                    $dropDownItem.data(\"option-toggle\", appendItem);\n                    $selectedItem.data(\"option-remove\", null);\n                    $selectedItem.remove();\n                    optionElement.selected = false;\n                    adoptDropDownItem(false);\n                };\n\n                this.adapter.CreateSelectedItemContent(\n                    $selectedItem, \n                    itemText, () => {\n                        removeItem();\n                        this.clearFilterInput(true);\n                        this.updateDropDownPosition(false);\n                        $(this.filterInput).focus();\n                });\n                $selectedItem.insertBefore(this.jQuery(this.filterInputItem));\n                $dropDownItem.data(\"option-toggle\", removeItem);\n                $selectedItem.data(\"option-remove\", removeItem);\n                return $selectedItem;\n            }\n            $dropDownItem.data(\"option-toggle\", () => appendItem());\n            \n            if (isSelected) {\n                appendItem();\n            }\n        }\n\n        adoptFilterInputLength() {\n            this.filterInput.style.width = this.filterInput.value.length*1.3 + 2 + \"ch\";\n        }\n\n        analyzeInputText() {\n            let text = this.filterInput.value.trim().toLowerCase();\n            let dropDownItems = this.dropDownMenu.querySelectorAll(\"LI\");\n            let dropDownItem = null;\n            for (let i = 0; i < dropDownItems.length; ++i) {\n                let it = dropDownItems[i];\n                if (it.textContent.trim().toLowerCase() == text)\n                {\n                    dropDownItem=it;\n                    break;\n                }\n            }\n            if (dropDownItem) {\n                let $dropDownItem = $(dropDownItem);\n                let isSelected = $dropDownItem.data(\"option-selected\");\n                if (!isSelected){\n                    let toggle = $dropDownItem.data(\"option-toggle\");\n                    toggle();\n                }\n                this.clearFilterInput(true);\n            }\n        }\n\n        resetSelectDropDownMenu() {\n            if (this.selectedDropDownItem !== null) {\n                this.adapter.Hover($(this.selectedDropDownItem), false);\n                this.selectedDropDownItem = null;\n            }\n            this.selectedDropDownIndex = null;\n        }\n        \n        keydownArrow(down) {\n            let visibleNodeListArray = $(this.dropDownMenu).find('LI:not([style*=\"display: none\"])').toArray();\n            if (visibleNodeListArray.length > 0) {\n                if (this.hasItems) {\n                    this.showDropDown();\n                }\n                if (this.selectedDropDownItem === null) {\n                    this.selectedDropDownIndex = down ? 0 : visibleNodeListArray.length - 1;\n                }\n                else {\n                    // IE10-11 doesn't support multiple arguments in classList remove \n                    this.adapter.Hover($(this.selectedDropDownItem), false);\n                    if (down) {\n                        let newIndex = this.selectedDropDownIndex + 1;\n                        this.selectedDropDownIndex = newIndex < visibleNodeListArray.length ? newIndex : 0;\n                    } else {\n                        let newIndex = this.selectedDropDownIndex - 1;\n                        this.selectedDropDownIndex = newIndex >= 0 ? newIndex : visibleNodeListArray.length - 1;\n                    }\n                }\n                this.selectedDropDownItem = visibleNodeListArray[this.selectedDropDownIndex];\n                // IE10-11 doesn't support multiple arguments in classList add \n                this.adapter.Hover($(this.selectedDropDownItem), true);\n            }\n        }\n\n        init() {\n            let $hiddenSelect = $(this.hiddenSelect);\n            $hiddenSelect.hide();\n            let disabled = this.hiddenSelect.disabled;\n\n            let $container = $(\"<div/>\");\n            $container.addClass(this.options.containerClass);\n            $container.insertAfter($hiddenSelect);\n                \n            this.container = $container.get(0);\n\n            let $selectedPanel = $(\"<ul/>\");\n            $selectedPanel.css(defSelectedPanelStyleSys);\n            if (!this.options.selectedPanelClass){\n                $selectedPanel.addClass(defSelectedPanelClass);\n                $selectedPanel.css(defSelectedPanelStyle);\n                $selectedPanel.css({\"min-height\":this.options.selectedPanelMinHeight});\n            }\n            else\n                $selectedPanel.addClass(this.options.selectedPanelClass);\n            $selectedPanel.appendTo(this.container);\n            this.selectedPanel = $selectedPanel.get(0);\n            this.adapter.Init($selectedPanel);\n            \n\n            let $filterInputItem = $('<li/>');\n            this.filterInputItem = $filterInputItem.get(0)\n            $filterInputItem.css(defFilterInputItemStyleSys)\n\n            if (!this.options.filterInputItemClass)\n                $filterInputItem.addClass(this.options.filterInputItemClass)\n            \n            $filterInputItem.appendTo(this.selectedPanel);\n            \n\n            let $filterInput = $('<input type=\"search\" autocomplete=\"off\">');\n            if (!this.options.filterInputClass){\n                $filterInput.css(defFilterInputStyleSys);\n                $filterInput.css(\"color\", this.options.filterInputColor);\n            } else {\n                $filterInput.addClass(this.options.filterInputClass);\n            }\n            $filterInput.appendTo(this.filterInputItem);\n            this.filterInput = $filterInput.get(0);\n\n            let $dropDownMenu = $(\"<ul/>\")\n                .css({\"display\":\"none\"})\n                .appendTo($container);\n            this.dropDownMenu = $dropDownMenu.get(0);\n\n            $dropDownMenu.addClass(this.options.dropDownMenuClass);\n            // prevent heavy understandable styling error\n            $dropDownMenu.css(defDropDownMenuStyleSys);\n\n            this.popper = new Popper(this.filterInput, this.dropDownMenu, {\n                placement: 'bottom-start',\n                modifiers: {\n                    preventOverflow: {enabled:false},\n                    hide: {enabled:false},\n                    flip: { enabled:false }\n                    }\n            });\n            \n            // some browsers (IE11) can change select value (\"autocomplet\") after page is loaded but before \"ready\" event\n            $(document).ready(() => {\n                let selectOptions = $hiddenSelect.find('option');\n                selectOptions.each(\n                    (index, optionElement) => {\n                        this.appendDropDownItem(optionElement);\n                    }\n                );\n                this.hasItems = selectOptions.length > 0;\n                this.updateDropDownPosition(false);\n\n                $dropDownMenu.find('li').click(event => {\n                    this.clickDropDownItem(event);\n                });\n\n                $dropDownMenu.find(\"li\").on(\"mouseover\", event => {\n                    this.adapter.Hover($(event.target).closest(\"li\"), true);\n                });\n\n                $dropDownMenu.find(\"li\").on(\"mouseout\", event => {\n                    this.adapter.Hover($(event.target).closest(\"li\"), false);\n                });\n            });\n\n            if (disabled) {\n                this.filterInput.style.display = \"none\";\n                this.adapter.Enable($(this.selectedPanel), false);\n            } else {\n                this.filterInput.style.display = \"inline-block\";\n                this.adapter.Enable($(this.selectedPanel), true);\n                \n                $dropDownMenu.click((event) => {\n                    event.stopPropagation();\n                });\n\n                $dropDownMenu.on(\"mouseover\", () => {\n                    this.resetSelectDropDownMenu();\n                });\n\n                $selectedPanel.click((event) => {\n                    if (event.target.nodeName != \"INPUT\")\n                        $(this.filterInput).val('').focus();\n                    if (this.hasItems)\n                        if (this.adapter.FilterClick(event))\n                            this.showDropDown();\n                });\n\n                $filterInput.on(\"keydown\", (event) => {\n                    if (event.which == 38) {\n                        event.preventDefault();\n                        this.keydownArrow(false);\n                    }\n                    else if (event.which == 40) {\n                        event.preventDefault()\n                        this.keydownArrow(true);\n                    }\n                    else if (event.which == 13) {\n                        event.preventDefault();\n                    }\n                    else if (event.which == 9) {\n                        if (this.filterInput.value) {\n                            event.preventDefault();\n                        }\n                        else {\n                            this.closeDropDown();\n                        }\n                    }\n                    else {\n                        if (event.which == 8) {\n                            // detect that backspace is at start of input field (this will be used at keydown)\n                            this.backspaceAtStartPoint = (this.filterInput.selectionStart == 0 && this.filterInput.selectionEnd == 0);\n                        }\n                        this.resetSelectDropDownMenu();\n                    }\n                });\n\n                $filterInput.on(\"keyup\", (event) => {\n                    if (event.which == 13 || event.which == 9 ) {\n                        if (this.selectedDropDownItem) {\n                            let $selectedDropDownItem = $(this.selectedDropDownItem);\n                            let toggleItem =  $selectedDropDownItem.data(\"option-toggle\");\n                            toggleItem();\n                            this.closeDropDown();\n                        } else {\n                            this.analyzeInputText();\n                        }\n                    } else if (event.which == 8) {\n                        if (this.filterInput.selectionEnd == 0 && this.filterInput.selectionStart == 0 && this.backspaceAtStartPoint) {\n                            let $penult = $(this.selectedPanel).find(\"LI:last\").prev();\n                            if ($penult.length){\n                                let removeItem = $penult.data(\"option-remove\");\n                                removeItem();\n                            }\n                        }\n                        this.backspaceAtStartPoint = null;\n                        //if ($dropDownMenu.is(':hidden'))\n                        this.updateDropDownPosition(false);\n                    } else if (event.which == 27) { // escape\n                        this.closeDropDown();\n                    }\n                });\n\n                // Set on change for filter input\n                $filterInput.on('input', () => { \n                    this.adoptFilterInputLength();\n                    this.filterDropDownMenu();\n                    if (this.hasItems) {\n                        this.updateDropDownPosition(false); // we need it to support case when textbox changes its place because of line break (texbox grow with each key press)\n                        this.showDropDown();\n                    } else {\n                        this.hideDropDown();\n                    }\n                });\n\n                if (this.options.doManageFocus)\n                {\n                    $filterInput.focusin(() => {\n                        this.adapter.Focus($selectedPanel, true);\n                    });\n\n                    $filterInput.focusout(() => {\n                        if (!this.skipFocusout) {\n                            this.adapter.Focus($selectedPanel, false);\n                        }\n                    });\n\n                    $container.mousedown(() => {\n                        this.skipFocusout = true;\n                    });\n\n                    $(window.document).mouseup(() => {\n                        this.skipFocusout = false;\n                    });\n                }\n\n                $(window.document).mouseup((event) => {\n                    if (!(this.container === event.target || $.contains(this.container, event.target))) {\n                        this.closeDropDown();\n                    }\n                });\n            }\n        }\n    }\n\n    function jQueryInterface(options) {\n        return this.each(function () {\n            let data = $(this).data(dataKey)\n\n            if (!data) {\n                if (/dispose|hide/.test(options)) {\n                    return;\n                }\n                const optionsObject = (typeof options === 'object')?options:null;\n                data = new Plugin(this, optionsObject);\n                $(this).data(dataKey, data);\n            }\n\n            if (typeof options === 'string') {\n                let methodName = options;\n                if (typeof data[methodName] === 'undefined') {\n                    throw new TypeError(`No method named \"${methodName}\"`)\n                }\n                data[methodName]()\n            }\n        })\n    }\n\n    $.fn[pluginName] = jQueryInterface;\n\n    // in case of mulitple $(this) it will return 1st element plugin instance\n    $.fn[pluginName.charAt(0).toUpperCase() + pluginName.slice(1)] = function () {\n        return $(this).data(\"plugin_\" + pluginName);\n    };\n\n    $.fn[pluginName].Constructor = Plugin;\n\n    $.fn[pluginName].noConflict = function () {\n        $.fn[pluginName] = JQUERY_NO_CONFLICT\n        return jQueryInterface;\n    }\n    return Plugin;\n})(window, $, Popper);\n\nexport default BsMultiSelect;\n"]}