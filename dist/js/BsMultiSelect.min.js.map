{"version":3,"sources":["../../js/src/Bootstrap4CssAdapter.es8.js","../../js/src/BsMultiSelect.es8.js"],"names":["Bootstrap4CssAdapter","jQuery","hiddenSelect","options","this","extend","containerClass","dropDownMenuClass","dropDownItemClass","dropDownItemHoverClass","selectedPanelClass","selectedPanelFocusClass","selectedPanelReadonlyClass","selectedItemClass","removeSelectedItemButtonClass","filterInputItemClass","filterInputClass","CreateSelectedItemContent","$selectedItem","itemText","removeSelectedItem","addClass","$text","$buttom","on","appendTo","CreateDropDownItemContent","$dropDownItem","optionId","isSelected","checkBoxId","name","toLowerCase","checked","$checkBox","find","prop","Init","$container","$selectedPanel","$filterInputItem","$filterInput","$dropDownMenu","$hiddenSelect","hasClass","Enable","isEnabled","inputId","id","$formGroup","closest","length","$label","f","attr","off","Hover","isHover","removeClass","FilterClick","event","target","nodeName","parentElement","Focus","isFocused","window","$","Popper","JQUERY_NO_CONFLICT","fn","pluginName","dataKey","defSelectedPanelStyleSys","display","flex-wrap","list-style-type","defFilterInputStyleSys","width","border","padding","outline","background-color","defDropDownMenuStyleSys","defaults","doManageFocus","Plugin","selectElement","adapter","TypeError","container","selectedPanel","filterInputItem","filterInput","dropDownMenu","popper","filterInputItemOffsetLeft","skipFocusout","hoveredDropDownItem","hoveredDropDownIndex","hasDropDownVisible","init","_proto","prototype","updateDropDownPosition","force","offsetLeft","update","hideDropDown","style","showDropDown","resetDropDownMenuHover","filterDropDownMenu","text","value","trim","visible","each","i","dropDownMenuItem","$dropDownMenuItem","show","data","indexOf","hide","clearFilterInput","updatePosition","input","closeDropDown","appendDropDownItem","optionElement","_this","selected","adoptDropDownItem","appendItem","removeItem","remove","removeItemAndCloseDropDown","insertBefore","keydownArrow","down","visibleNodeListArray","toArray","newIndex","forceUpdatePosition","_this2","disabled","get","css","insertAfter","placement","modifiers","preventOverflow","enabled","flip","document","ready","selectOptions","index","click","preventDefault","stopPropagation","currentTarget","toggleItem","focus","val","focusin","focusout","mousedown","mouseup","contains","which","$penult","prev","dropDownItems","querySelectorAll","dropDownItem","it","textContent","toggle","jQueryInterface","test","methodName","charAt","toUpperCase","slice","Constructor","noConflict"],"mappings":"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","sourcesContent":["class Bootstrap4CssAdapter {\r\n\r\n    constructor(jQuery, hiddenSelect, options) {\r\n        const defaults = {\r\n            containerClass: 'dashboardcode-bsmultiselect',\r\n            dropDownMenuClass: 'dropdown-menu',\r\n            dropDownItemClass: 'px-2',\r\n            dropDownItemHoverClass: 'text-primary bg-light',\r\n            selectedPanelClass: 'form-control',\r\n            selectedPanelFocusClass : 'focus',\r\n            selectedPanelReadonlyClass: 'disabled',\r\n            selectedItemClass: 'badge', \r\n            removeSelectedItemButtonClass: 'close',\r\n            filterInputItemClass: '',\r\n            filterInputClass: ''\r\n        };\r\n        this.options = jQuery.extend({}, defaults, options);\r\n        this.jQuery=jQuery;\r\n        this.hiddenSelect=hiddenSelect;\r\n        \r\n    }\r\n\r\n    CreateSelectedItemContent($selectedItem, itemText, removeSelectedItem){\r\n        $selectedItem.addClass(this.options.selectedItemClass);\r\n        let $text = this.jQuery(`<span>${itemText}</span>`)\r\n        let $buttom = this.jQuery('<button aria-label=\"Close\" tabIndex=\"-1\" type=\"button\"><span aria-hidden=\"true\">&times;</span></button>');\r\n        $buttom.addClass(this.options.removeSelectedItemButtonClass)\r\n        $buttom.on(\"click\", removeSelectedItem);\r\n        $text.appendTo($selectedItem);\r\n        $buttom.appendTo($selectedItem); \r\n    }\r\n\r\n    CreateDropDownItemContent($dropDownItem, optionId, itemText, isSelected){\r\n        let checkBoxId = `${this.options.containerClass}-${this.hiddenSelect.name.toLowerCase()}-generated-id-${optionId.toLowerCase()}`;\r\n        let checked = isSelected ? \"checked\" : \"\";\r\n\r\n        let $dropDownItemContent= this.jQuery(`<div class=\"custom-control custom-checkbox\">\r\n                <input type=\"checkbox\" class=\"custom-control-input\" id=\"${checkBoxId}\" ${checked}>\r\n                <label class=\"custom-control-label\" for=\"${checkBoxId}\">${itemText}</label>\r\n        </div>`)\r\n        $dropDownItemContent.appendTo($dropDownItem);\r\n        $dropDownItem.addClass(this.options.dropDownItemClass)\r\n        let $checkBox = $dropDownItem.find(`INPUT[type=\"checkbox\"]`);\r\n        let adoptDropDownItem = (isSelected) => {\r\n            $checkBox.prop('checked', isSelected);\r\n        }\r\n        return adoptDropDownItem;\r\n    }\r\n\r\n    Init($container, $selectedPanel, $filterInputItem, $filterInput, $dropDownMenu){\r\n        $container.addClass(this.options.containerClass);\r\n        $selectedPanel.addClass(this.options.selectedPanelClass);\r\n        \r\n\r\n        let $hiddenSelect = this.jQuery(this.hiddenSelect);\r\n        if ($hiddenSelect.hasClass(\"is-valid\")){\r\n            $selectedPanel.addClass(\"is-valid\");\r\n        }\r\n        \r\n        if ($hiddenSelect.hasClass(\"is-invalid\")){\r\n            $selectedPanel.addClass(\"is-invalid\");\r\n        }\r\n\r\n        $dropDownMenu.addClass(this.options.dropDownMenuClass);\r\n        $filterInputItem.addClass(this.options.filterInputItemClass)\r\n        $filterInput.addClass(this.options.filterInputClass);\r\n    }\r\n\r\n    Enable($selectedPanel, isEnabled){\r\n        if(isEnabled){\r\n            let inputId = this.hiddenSelect.id;\r\n            let $formGroup = this.jQuery(this.hiddenSelect).closest('.form-group');\r\n            \r\n            if ($formGroup.length == 1) {\r\n                let $label = $formGroup.find(`label[for=\"${inputId}\"]`);\r\n                let f = $label.attr('for');\r\n                let $filterInput = $selectedPanel.find('input');\r\n                if (f == this.hiddenSelect.id) {\r\n                    let id = `${this.options.containerClass}-generated-filter-id-${this.hiddenSelect.id}`;\r\n                    $filterInput.attr('id', id);\r\n                    $label.attr('for', id);\r\n                }\r\n            }\r\n        }\r\n        else{\r\n            $selectedPanel.addClass(this.options.selectedPanelReadonlyClass);\r\n            $selectedPanel.find('BUTTON').prop(\"disabled\", true).off();\r\n        }\r\n    }\r\n\r\n    Hover($dropDownItem, isHover){\r\n        if (isHover)\r\n            $dropDownItem.addClass(this.options.dropDownItemHoverClass);\r\n        else\r\n            $dropDownItem.removeClass(this.options.dropDownItemHoverClass);\r\n    }\r\n\r\n    FilterClick(event){\r\n        return !(event.target.nodeName == \"BUTTON\" || (event.target.nodeName == \"SPAN\" && event.target.parentElement.nodeName == \"BUTTON\"))\r\n    }\r\n\r\n    Focus($selectedPanel, isFocused){\r\n        if (isFocused){\r\n            $selectedPanel.addClass(this.options.selectedPanelFocusClass);\r\n        }else{\r\n            $selectedPanel.removeClass(this.options.selectedPanelFocusClass);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Bootstrap4CssAdapter;","import $ from 'jquery'\nimport Popper from 'popper.js'\nimport Bootstrap4CssAdapter from './Bootstrap4CssAdapter.es8'\n\n// TODO: try to find convinient way to declare private members. Is it convinient enough to move them into IIFE?\nconst BsMultiSelect = ((window, $, Popper) => {\n    const JQUERY_NO_CONFLICT = $.fn[pluginName];\n    const pluginName = 'dashboardCodeBsMultiSelect';\n    const dataKey = `plugin_${pluginName}`;\n\n    const defSelectedPanelStyleSys = {'display':'flex', 'flex-wrap':'wrap', 'list-style-type':'none'};  // remove bullets since this is ul\n    const defFilterInputStyleSys   = {'width':'2ch', 'border':'0', 'padding':'0', 'outline':'none', 'background-color':'transparent' };\n    const defDropDownMenuStyleSys  = {'list-style-type':'none'}; // remove bullets since this is ul\n\n    const defaults = {\n        doManageFocus:true\n    }\n\n    class Plugin {\n        constructor(selectElement, options, adapter) {\n            if (typeof Popper === 'undefined') {\n                throw new TypeError('DashboardCode BsMultiSelect require Popper.js (https://popper.js.org)')\n            }\n\n            // readonly\n            this.selectElement = selectElement;\n            this.options = $.extend({}, defaults, options);\n\n            this.adapter = adapter?adapter:new Bootstrap4CssAdapter($, this.selectElement);\n            \n            this.container = null;\n            this.selectedPanel = null;\n            this.filterInputItem = null;\n            this.filterInput = null;\n            this.dropDownMenu = null;\n            this.popper = null;\n\n            // state\n            this.filterInputItemOffsetLeft = null; // used to detect changes in input field position (by comparision with current value)\n            this.skipFocusout = false; \n            this.hoveredDropDownItem = null;\n            this.hoveredDropDownIndex = null;\n            this.hasDropDownVisible = false;\n            this.init();\n        }\n\n        updateDropDownPosition(force) {\n            let offsetLeft = this.filterInputItem.offsetLeft;\n            if (force || this.filterInputItemOffsetLeft!=offsetLeft){\n                this.popper.update();\n                this.filterInputItemOffsetLeft=offsetLeft;\n            }\n        }\n\n        hideDropDown() {\n            this.dropDownMenu.style.display = 'none';\n        }\n\n        showDropDown() {\n            this.dropDownMenu.style.display = 'block';\n        }\n\n        // Public methods\n        resetDropDownMenuHover() {\n            if (this.hoveredDropDownItem !== null) {\n                this.adapter.Hover($(this.hoveredDropDownItem), false);\n                this.hoveredDropDownItem = null;\n            }\n            this.hoveredDropDownIndex = null;\n        }\n\n        filterDropDownMenu() {\n            let text = this.filterInput.value.trim().toLowerCase();\n            let visible = 0;\n            $(this.dropDownMenu).find('LI').each((i, dropDownMenuItem) => {\n                let $dropDownMenuItem = $(dropDownMenuItem);\n                if (text == '') {\n                    $dropDownMenuItem.show();\n                    visible++;\n                }\n                else {\n                    let itemText = $dropDownMenuItem.data(\"option-text\");\n                    let isSelected = $dropDownMenuItem.data(\"option-selected\"); \n                    if (!isSelected && itemText.indexOf(text)>=0) {\n                        $dropDownMenuItem.show();\n                        visible++;\n                    } else {\n                        $dropDownMenuItem.hide();\n                    }\n                }\n            });\n            this.hasDropDownVisible = visible > 0;\n            this.resetDropDownMenuHover();\n        }\n\n        clearFilterInput(updatePosition) {\n            if (this.filterInput.value) {\n                this.filterInput.value = '';\n                this.input(updatePosition);\n            }\n        }\n\n        closeDropDown() {\n            this.resetDropDownMenuHover();\n            this.clearFilterInput(true);\n            this.hideDropDown();\n        }\n\n        appendDropDownItem(optionElement) {\n            let optionId = optionElement.value;\n            let itemText = optionElement.text;\n            let isSelected = optionElement.selected;\n            let $dropDownItem = $(\"<LI/>\");\n            $dropDownItem.data(\"option-id\", optionId);\n            $dropDownItem.data(\"option-text\", itemText.toLowerCase());\n\n            let adoptDropDownItem = this.adapter.CreateDropDownItemContent($dropDownItem, optionId, itemText, isSelected)\n            $dropDownItem.appendTo(this.dropDownMenu);\n\n            let appendItem = () => {\n                $dropDownItem.data(\"option-selected\", true);\n                let $selectedItem = $(\"<LI/>\");\n                $selectedItem.data(\"option-id\", optionId);\n                optionElement.selected = true;\n                adoptDropDownItem(true);\n\n                let removeItem = () => {\n                    $dropDownItem.data(\"option-selected\", false);\n                    $dropDownItem.data(\"option-toggle\", appendItem);\n                    $selectedItem.data(\"option-remove\", null);\n                    $selectedItem.remove();\n                    optionElement.selected = false;\n                    adoptDropDownItem(false);\n                };\n                let removeItemAndCloseDropDown = () => {\n                    removeItem();\n                    this.closeDropDown();\n                };\n                this.adapter.CreateSelectedItemContent(\n                    $selectedItem, \n                    itemText, \n                    removeItemAndCloseDropDown\n                );\n                $selectedItem.insertBefore(this.filterInputItem);\n                $dropDownItem.data(\"option-toggle\", removeItem);\n                $selectedItem.data(\"option-remove\", removeItemAndCloseDropDown);\n                return $selectedItem;\n            }\n            $dropDownItem.data(\"option-toggle\", () => appendItem());\n            \n            if (isSelected) {\n                appendItem();\n            }\n        }\n\n        keydownArrow(down) {\n            let visibleNodeListArray = $(this.dropDownMenu).find('LI:not([style*=\"display: none\"])').toArray();\n            if (visibleNodeListArray.length > 0) {\n                if (this.hasDropDownVisible) {\n                    this.updateDropDownPosition(true);\n                    this.showDropDown();\n                }\n                if (this.hoveredDropDownItem === null) {\n                    this.hoveredDropDownIndex = down ? 0 : visibleNodeListArray.length - 1;\n                }\n                else {\n                    this.adapter.Hover($(this.hoveredDropDownItem), false);\n                    if (down) {\n                        let newIndex = this.hoveredDropDownIndex + 1;\n                        this.hoveredDropDownIndex = newIndex < visibleNodeListArray.length ? newIndex : 0;\n                    } else {\n                        let newIndex = this.hoveredDropDownIndex - 1;\n                        this.hoveredDropDownIndex = newIndex >= 0 ? newIndex : visibleNodeListArray.length - 1;\n                    }\n                }\n                this.hoveredDropDownItem = visibleNodeListArray[this.hoveredDropDownIndex];\n                this.adapter.Hover($(this.hoveredDropDownItem), true);\n            }\n        }\n\n        input(forceUpdatePosition) {\n            this.filterInput.style.width = this.filterInput.value.length*1.3 + 2 + \"ch\";\n            this.filterDropDownMenu();\n            if (this.hasDropDownVisible) {\n                if (forceUpdatePosition) // ignore it if it is called from \n                    this.updateDropDownPosition(forceUpdatePosition); // we need it to support case when textbox changes its place because of line break (texbox grow with each key press)\n                this.showDropDown();\n            } else {\n                this.hideDropDown();\n            }\n        }\n\n        init() {\n            let $hiddenSelect = $(this.selectElement);\n            $hiddenSelect.hide();\n            let disabled = this.selectElement.disabled;\n\n            let $container = $(\"<DIV/>\");\n            this.container = $container.get(0);\n\n            let $selectedPanel = $(\"<UL/>\");\n            $selectedPanel.css(defSelectedPanelStyleSys);\n            \n            this.selectedPanel = $selectedPanel.get(0);\n            \n            $selectedPanel.appendTo(this.container);\n\n            let $filterInputItem = $('<LI/>');\n            this.filterInputItem = $filterInputItem.get(0)\n\n            $filterInputItem.appendTo(this.selectedPanel);\n\n            let $filterInput = $('<INPUT type=\"search\" autocomplete=\"off\">');\n            $filterInput.css(defFilterInputStyleSys);\n            $filterInput.appendTo(this.filterInputItem);\n            this.filterInput = $filterInput.get(0);\n\n            let $dropDownMenu = $(\"<UL/>\")\n                .css({\"display\":\"none\"})\n                .appendTo($container);\n            this.dropDownMenu = $dropDownMenu.get(0);\n            \n            // prevent heavy understandable styling error\n            $dropDownMenu.css(defDropDownMenuStyleSys);\n\n            this.adapter.Init($container, $selectedPanel, $filterInputItem, $filterInput, $dropDownMenu);\n            $container.insertAfter($hiddenSelect);\n            \n            this.popper = new Popper(this.filterInput, this.dropDownMenu, {\n                placement: 'bottom-start',\n                modifiers: {\n                    preventOverflow: {enabled:false},\n                    hide: {enabled:false},\n                    flip: { enabled:false }\n                    }\n            });\n            \n            // some browsers (IE11) can change select value (\"autocomplete\") after page is loaded but before \"ready\" event\n            $(document).ready(() => {\n                let selectOptions = $hiddenSelect.find('OPTION');\n                selectOptions.each(\n                    (index, optionElement) => {\n                        this.appendDropDownItem(optionElement);\n                    }\n                );\n                this.hasDropDownVisible = selectOptions.length > 0;\n                this.updateDropDownPosition(false);\n\n                $dropDownMenu.find('LI').click(event => {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    let toggleItem = $(event.currentTarget).closest(\"LI\").data(\"option-toggle\");\n                    toggleItem();\n                    this.filterInput.focus(); \n                });\n\n                $dropDownMenu.find(\"LI\").on(\"mouseover\", event => {\n                    this.adapter.Hover($(event.target).closest(\"LI\"), true);\n                });\n\n                $dropDownMenu.find(\"LI\").on(\"mouseout\", event => {\n                    this.adapter.Hover($(event.target).closest(\"LI\"), false);\n                });\n\n                if (disabled) {\n                    this.filterInput.style.display = \"none\";\n                    this.adapter.Enable($selectedPanel, false);\n                } else {\n                    this.filterInput.style.display = \"inline-block\";\n                    this.adapter.Enable($selectedPanel, true);\n                    \n                    $selectedPanel.click((event) => {\n                        if (event.target.nodeName != \"INPUT\")\n                            $filterInput.val('').focus();\n                        if (this.hasDropDownVisible)\n                            if (this.adapter.FilterClick(event)){\n                                this.updateDropDownPosition(true);\n                                this.showDropDown();\n                            }\n                    });\n    \n                    $dropDownMenu.click((event) => {\n                        event.stopPropagation();\n                    });\n    \n                    $dropDownMenu.on(\"mouseover\", () => this.resetDropDownMenuHover());\n    \n                    if (this.options.doManageFocus)\n                    {\n                        $filterInput.focusin(() => {\n                            this.adapter.Focus($selectedPanel, true);\n                        });\n    \n                        $filterInput.focusout(() => {\n                            if (!this.skipFocusout) {\n                                this.adapter.Focus($selectedPanel, false);\n                            }\n                        });\n    \n                        $container.mousedown(() => {\n                            this.skipFocusout = true;\n                        });\n    \n                        $(window.document).mouseup(() => {\n                            this.skipFocusout = false;\n                        });\n                    }\n    \n                    $(window.document).mouseup((event) => {\n                        if (!(this.container === event.target || $.contains(this.container, event.target))) {\n                            this.closeDropDown();\n                        }\n                    });\n                }\n            });\n\n            $filterInput.on(\"keydown\", (event) => {\n                if (event.which == 38) {\n                    event.preventDefault();\n                    this.keydownArrow(false);\n                }\n                else if (event.which == 40) {\n                    event.preventDefault()\n                    this.keydownArrow(true);\n                }\n                else if (event.which == 13) {\n                    event.preventDefault();\n                }\n                else if (event.which == 9) {\n                    if (this.filterInput.value) {\n                        event.preventDefault();\n                    }\n                    else {\n                        this.closeDropDown();\n                    }\n                }\n                else {\n                    if (event.which == 8) {\n                        // NOTE: this will process backspace only if there are no text in the input field\n                        // If user will find this inconvinient, we will need to calculate something like this\n                        // this.isBackspaceAtStartPoint = (this.filterInput.selectionStart == 0 && this.filterInput.selectionEnd == 0);\n                        if (!this.filterInput.value)\n                        {\n                            let $penult = $(this.selectedPanel).find(\"LI:last\").prev();\n                            if ($penult.length){\n                                let removeItem = $penult.data(\"option-remove\");\n                                removeItem();\n                            }\n                            this.updateDropDownPosition(false);\n                        }\n                    }\n                    this.resetDropDownMenuHover();\n                }\n            });\n\n            $filterInput.on(\"keyup\", (event) => {\n                if (event.which == 13 || event.which == 9 ) {\n                    if (this.hoveredDropDownItem) {\n                        let $hoveredDropDownItem = $(this.hoveredDropDownItem);\n                        let toggleItem =  $hoveredDropDownItem.data(\"option-toggle\");\n                        toggleItem();\n                        this.closeDropDown();\n                    } else {\n                        let text = this.filterInput.value.trim().toLowerCase();\n                        let dropDownItems = this.dropDownMenu.querySelectorAll(\"LI\");\n                        let dropDownItem = null;\n                        for (let i = 0; i < dropDownItems.length; ++i) {\n                            let it = dropDownItems[i];\n                            if (it.textContent.trim().toLowerCase() == text)\n                            {\n                                dropDownItem=it;\n                                break;\n                            }\n                        }\n                        if (dropDownItem) {\n                            let $dropDownItem = $(dropDownItem);\n                            let isSelected = $dropDownItem.data(\"option-selected\");\n                            if (!isSelected){\n                                let toggle = $dropDownItem.data(\"option-toggle\");\n                                toggle();\n                            }\n                            this.clearFilterInput(true);\n                        }\n                    }\n                } \n                else if (event.which == 27) { // escape\n                    this.closeDropDown();\n                }\n            });\n\n            $filterInput.on('input', () => { \n                this.input(true);\n            });\n        }\n    }\n\n    function jQueryInterface(options) {\n        return this.each(function () {\n            let data = $(this).data(dataKey)\n\n            if (!data) {\n                if (/dispose|hide/.test(options)) {\n                    return;\n                }\n                const optionsObject = (typeof options === 'object')?options:null;\n                data = new Plugin(this, optionsObject);\n                $(this).data(dataKey, data);\n            }\n\n            if (typeof options === 'string') {\n                let methodName = options;\n                if (typeof data[methodName] === 'undefined') {\n                    throw new TypeError(`No method named \"${methodName}\"`)\n                }\n                data[methodName]()\n            }\n        })\n    }\n\n    $.fn[pluginName] = jQueryInterface;\n\n    // in case of mulitple $(this) it will return 1st element plugin instance\n    $.fn[pluginName.charAt(0).toUpperCase() + pluginName.slice(1)] = function () {\n        return $(this).data(\"plugin_\" + pluginName);\n    };\n\n    $.fn[pluginName].Constructor = Plugin;\n\n    $.fn[pluginName].noConflict = function () {\n        $.fn[pluginName] = JQUERY_NO_CONFLICT\n        return jQueryInterface;\n    }\n    return Plugin;\n})(window, $, Popper);\n\nexport default BsMultiSelect;\n"]}